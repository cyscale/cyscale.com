{"componentChunkName":"component---src-template-blog-template-js","path":"/blog/integrating-nats-into-the-cyscale-platform/","result":{"pageContext":{"alldata":{"frontmatter":{"authors":"Andrei Ștefănie","categories":["Product"],"title":"Integrating NATS Into the Cyscale Platform","seoTitle":"Integrating NATS Into the Cyscale Platform","description":"Some concepts and techniques we leveraged to switch to a cloud-native message broker.","seoDescription":"Discover how Cyscale has enhanced cloud security integration by utilizing NATS on Kubernetes for efficient, scalable message-based communication. Read about the journey, benefits, and technical implementation on our blog.","date":"2021-12-22T10:11:16.968Z","featuredpost":true,"permalink":"integrating-nats-into-the-cyscale-platform","featuredimage":{"publicURL":"/static/cb4216e63701672e106156941ccdecaf/nats-horizontal-color.webp","childImageSharp":{"gatsbyImageData":{"layout":"constrained","images":{"fallback":{"src":"/static/cb4216e63701672e106156941ccdecaf/02dc4/nats-horizontal-color.webp","srcSet":"/static/cb4216e63701672e106156941ccdecaf/913d0/nats-horizontal-color.webp 205w,\n/static/cb4216e63701672e106156941ccdecaf/85995/nats-horizontal-color.webp 410w,\n/static/cb4216e63701672e106156941ccdecaf/02dc4/nats-horizontal-color.webp 820w,\n/static/cb4216e63701672e106156941ccdecaf/62a3a/nats-horizontal-color.webp 1640w","sizes":"(min-width: 820px) 820px, 100vw"},"sources":[]},"width":820,"height":461}}},"tableOfContents":null},"rawMarkdownBody":"\n<!--StartFragment-->\n\n## Backstory\n\nCyscale helps you secure your cloud infrastructure. To achieve this, the platform must be able to read (sync) the cloud resources, perform assessments against a set of controls (security and architecture guidelines and best practices), send notifications, generate reports, perform scheduled tasks, and so on. Given the highly distributed and segregated nature of the platform, we chose a microservices architecture on top of Kubernetes. Also, by design, these processes are mostly asynchronous, happening in the background as a result of a certain event or trigger.\n\nBesides direct HTTP communication (REST mostly for the account/user management and GraphQL for everything cloud-related), we make heavy use of message-based communication.\n\nUp until recently, Redis served as our backbone for sending messages. We used Redis Lists to simulate queues (e.g., for sending emails) and Redis Pub/Sub for, well, implementing the publish-subscribe pattern (e.g., for triggering the synchronization of the cloud resources). We knew since the beginning that Redis will not serve as the messaging middleware forever, but we started with it since it was already there for caching and tasks (through [Go Celery](https://github.com/gocelery/gocelery)).\n\nDue to a mix of accumulated technical debt and a desire for simplicity, we decided to invest in integrating a purpose-built technology for handling messages. After a good amount of research covering topics such as operational simplicity, community, and documentation, we decided to go with [NATS](https://nats.io/). As a side note, we continue to love Redis and there are plenty of well-established companies using it as their messaging middleware with great success.\n\nThe rest of the article will cover the main steps we took to integrate NATS into our platform such as understanding the NATS ecosystem, deploying the relevant tools on our Kubernetes cluster using Helm - this will form the main part since this is where we faced the most challenges, and, of course, sending and consuming messages.\n\n<!--EndFragment-->\n\n<!--StartFragment-->\n\n**The NATS Ecosystem**\n\n![The NATS ecosystem encompassing the core NATS server, JetStream, the NATS clients and CLI, and the NATS resources for Kubernetes](/img/cyscale-nats.webp 'The NATS ecosystem')\n\n### Core NATS\n\nAt its core, **the NATS server** is a **publish/subscribe** message broker. It offers **at most once delivery** and works based on **subjects**. These can have a hierarchical structure such as `sync.aws` and `sync.gcp`. Services concerned with messages related to syncing operations for AWS will only subscribe to `sync.aws` while other services might listen for all sync-related messages on `sync.*` (which covers both subjects) or even `sync.>` (which will also cover `sync.aws.ec2` - a separate subject).\n\nAnother feature that provides us with great value is called **queue groups**. This helps us horizontally scale our consumers while making sure that only one instance of a service receives a certain message. If you have experience with Kafka, it resembles consumer groups. What’s nice about queue groups is that they are automatically created when consumers subscribe to a subject and provide the queue group parameter (a simple string that, just like subjects, can have a hierarchical structure). For example, we use the name of the service (e.g. notifier) as the queue group.\n\nWhile the core functionality is great and simple, plain old pub/sub with at most once delivery will not cover all use cases. Subscribers might be under heavy load or even down, there might be a network partition or we might even want to keep messages and follow an approach based on event sourcing (you can find more examples in the [NATS docs](https://docs.nats.io/using-nats/developer/develop_jetstream)). In other words, as soon as we need **temporal decoupling** between publishers and subscribers, we need **persistence**, which for NATS is provided by JetStream.\n\n### JetStream\n\nJetStream adds the concept of **streams** on top of the core NATS subjects. Basically, if you want your messages to be persisted, you can enable JetStream on the NATS server and create a stream that will actually store the messages sent to a subject (or multiple subjects - this is mostly to optimize resource utilization; for example, we have one stream called sync that stores all messages sent to any sync subject - i.e. sync.>).\n\nIf your system takes full advantage of JetStream, at most once delivery transforms into **at least once** and even **exactly once** by leveraging [message deduplication](https://docs.nats.io/using-nats/developer/develop_jetstream/model_deep_dive#message-deduplication) (NATS will discard a message if another message with the same publisher-provided ID exists in the stream over a window of a certain time - 2 minutes by default).\n\nOne confusion we had at the beginning was whether we actually had to do anything to take advantage of JetStream besides enabling it. Again, bringing the simplicity up front, publishers will not require any modification unless you are looking for exactly-once delivery (you will have to add the message ID). They still send messages on a certain subject and, behind the scenes, JetStream will persist them in the configured stream.\n\nOn the other hand, **you do have to create the actual streams** (we will talk about this below) and **adjust the subscribers to use the JetStream API** (part of the client NATS library). Note that you can still use the core NATS API, but your subscribers will not receive messages sent before they started listening (even though they are stored in the stream). The reason behind this is that JetStream actually creates consumers that handle the delivery of messages for each subscriber. You will have to manually create the consumer when using the CLI, but the client libraries will handle this automatically when subscribing to a subject through the JetStream API.\n\nHaving the messages persisted also enables us to take different approaches based on what we want to achieve. We might still follow a pub/sub approach for certain subscribers (these are known as **push consumers**) (e.g. we use this approach for generating user-requested reports) or we might want to have more control over how messages are retrieved in which case we will use a **pull consumer**. This enables us to batch messages (e.g. we do this for sending notifications). Here is how we handle the messages in our notifier service:\n\n```typescript\nexport type MessageHandler = (data: NotificationDto[]) => Promise<void>;\n\nexport const handleNotificationMessages = async (handler: MessageHandler) => {\n    try {\n        const nc = await getNatsClient();\n\n        if (!process.env.NOTIFICATIONS_SUBJECT) {\n            throw Error('NOTIFICATIONS_SUBJECT not set');\n        }\n\n        const jc = JSONCodec<NotificationDto>();\n\n        const psub = await nc.jetstream().pullSubscribe(process.env.NOTIFICATIONS_SUBJECT, {\n            queue: 'notifier',\n            config: { durable_name: 'notifier' }\n        });\n\n        const done = (async () => {\n            let notifications: NotificationDto[] = [];\n            for await (const m of psub) {\n                try {\n                    notifications.push(jc.decode(m.data));\n                    m.ack(); // Wait to gather all messages from the current batch\n                    if (m.info.pending === 0) {\n                        await handler(notifications);\n                        logger.info(`Processing ${notifications.length} messages`);\n                        notifications = [];\n                    }\n                } catch (error) {\n                    logger.error(error);\n                }\n            }\n        })();\n\n        setInterval(() => {\n            psub.pull({ batch: 30, expires: 1000 });\n        }, 1000 * 30);\n\n        logger.info(`Listening for messages on ${process.env.NOTIFICATIONS_SUBJECT}`);\n\n        await done;\n        await psub.destroy();\n    } catch (e) {\n        logger.error(`Failed to initiate message listening ${e}`);\n    }\n};\n```\n\n(yes, most of our services are actually written in Go, hence the naming of some variables)\n\nAnother dilemma we faced was regarding **stream creation**. Who/what is responsible for creating the streams? One option is using the client libraries which expose a method to **idempotently** create streams. While this can work just fine, we didn’t want our services to bother with the technical details of NATS. Also, streams felt more like being part of the infrastructure than part of the actual services. So we continued our research and found [NACK](https://github.com/nats-io/nack) which we cover below.\n\nAs a side note regarding persistence/streaming with NATS, the precursor of JetStream is called STAN, which is now deprecated. We are mentioning this because there are still plenty of tutorials that focus on STAN, but JetStream is the way forward.\n\n<!--EndFragment-->\n\n<!--StartFragment-->\n\n## NATS on Kubernetes with Helm\n\nBeing part of the CNCF, we can expect NATS to have first-class support for Kubernetes. And it does.\n\nSince the entire Cyscale platform is specified as a Helm chart we just needed to add the [NATS](https://github.com/nats-io/k8s/tree/main/helm/charts/nats) subchart as a dependency and configure the values. You can check the [values file](https://github.com/nats-io/k8s/blob/main/helm/charts/nats/values.yaml) from the chart repo for reference. One small detail that cost us a few hours was how we were specifying the values for NATS. If you look at [the documentation](https://docs.nats.io/running-a-nats-service/introduction/running/nats-kubernetes/helm-charts#jetstream), you will notice the `nats` object. However, since we are deploying NATS as a subchart, we will need an additional parent `nats` object to instruct Helm to pass the values down to the nats subchart. Here are our values for NATS on the dev cluster:\n\n```yaml\nnats:\n  nats:\n    image: nats:alpine\n    resources:\n      requests:\n        cpu: 100m\n        memory: 100Mi\n      limits:\n        cpu: 200m\n        memory: 200Mi\n    jetstream:\n      enabled: true\n      memStorage:\n        enabled: true\n        size: 80Mi\n      fileStorage:\n        enabled: true\n        size: 1Gi\n        storageDirectory: /data/\n        storageClassName: default\n```\n\n(notice the two `nats`)\n\nBesides the actual NATS server (which is a container running in the NATS pod along with the monitoring and config reloader containers), we also have a **NATS Box** pod (comes with the NATS Helm chart) that helps us with testing and administrative tasks - basically its a **preconfigured NATS CLI**. We access it using the command `kubectl exec -it <nats-box-container> -- /bin/sh -l`. The other alternative would have been to install the NATS CLI on our machines and port forward the NATS server from the cluster.\n\n### Creating the Streams with NACK\n\nBesides NATS, we also added the [NACK subchart](https://github.com/nats-io/k8s/tree/main/helm/charts/nack) which requires the NACK **CRDs** (install using `kubectl apply -f <https://raw.githubusercontent.com/nats-io/nack/v0.6.0/deploy/crds.yml>`). That’s because it enables us to treat JetStream streams as Kubernetes resources deployed as part of the rest of the platform.\n\nInstead of having our services handle the stream creation or manually creating them from the NATS box, we specify them declaratively as follows (`templates/nats-streams.yaml`):\n\n```yaml\n# See https://github.com/nats-io/nack/blob/main/deploy/crds.yml for more properties\n{{- range .Values.nack.streams }}\napiVersion: jetstream.nats.io/v1beta2\nkind: Stream\nmetadata:\n  name: {{ .name | quote }}\nspec:\n  name: {{ .name }}\n  subjects: {{ .subjects }}\n  storage: {{ .storage | quote | default \"file\" }}\n  retention: {{ .retention | quote | default \"limits\" }}\n---\n{{- end }}\n```\n\nWe also declare the streams as a list in the values file (notice the `range`).\n\nOnce these are deployed, you can inspect the streams just like any other k8s resource using `kubectl get streams`. One issue we faced was that the streams were not actually created in JetStream (`nats stream ls` from the nats box) even though the k8s resources existed. We simply manually deleted them from the cluster (`kubectl delete streams.jetstream.nats.io --all`) and re-deployed the helm chart.\n\nThere is another alternative we considered - the [jetstream Terraform provider](https://registry.terraform.io/providers/nats-io/jetstream/latest/docs). While we do use Terraform to declare our infrastructure on top of which the Kubernetes cluster is running, we chose NACK because it fit our abstraction layers best and because the terraform provider, running locally or in our pipelines, has to somehow reach the NATS server. In our case, the NATS server is not exposed outside of the cluster (again, port-forwarding is an option).\n\n### Ending Notes\n\nWhile there are more subjects to cover such as [authentication](https://docs.nats.io/running-a-nats-service/configuration/securing_nats/auth_intro) and [authorization](https://docs.nats.io/running-a-nats-service/configuration/securing_nats/authorization), clustering (and [super-clusters](https://docs.nats.io/running-a-nats-service/configuration/gateways)), and multi-tenancy using [accounts](https://docs.nats.io/running-a-nats-service/configuration/securing_nats/accounts), we hope this article helps you better understand how NATS works and how to deploy it. This is our way of giving back to a growing community and expressing our appreciation for getting to work with such great technologies.\n\n<!--EndFragment-->\n"},"suggestions":[{"node":{"frontmatter":{"authors":"Sabrina Lupșan","categories":["Engineering","Cloud Native Security"],"title":"Secrets Management in Kubernetes: Essential Insights and Best Practices","seoTitle":"Secrets Management in Kubernetes: Essential Insights and Best Practices","description":"Secrets Management is always a hot topic nowadays. Choosing the correct encryption algorithm, storing secrets in the right service, setting access to them; these are all actions that can make it or break it for your infrastructure.   \n\nIn this article, we will not only discuss how you should manage secrets in Kubernetes, but also help you understand why all these protection measures are vital for your Kubernetes clusters.","seoDescription":"Secrets Management is always a hot topic nowadays. Choosing the correct encryption algorithm, storing secrets in the right service, setting access to them; these are all actions that can make it or break it for your infrastructure.     In this article, we will not only discuss how you should manage secrets in Kubernetes, but also help you understand why all these protection measures are vital for your Kubernetes clusters. ","date":"2024-03-08T12:22:26.016Z","featuredpost":true,"permalink":"secrets-management-kubernetes","featuredimage":{"publicURL":"/static/67db6dd1343d481e67f0cd2399e1b3e2/67_blog-kubernetes-secrets.png","childImageSharp":{"gatsbyImageData":{"layout":"constrained","images":{"fallback":{"src":"/static/67db6dd1343d481e67f0cd2399e1b3e2/d6cae/67_blog-kubernetes-secrets.png","srcSet":"/static/67db6dd1343d481e67f0cd2399e1b3e2/ac644/67_blog-kubernetes-secrets.png 205w,\n/static/67db6dd1343d481e67f0cd2399e1b3e2/89b47/67_blog-kubernetes-secrets.png 410w,\n/static/67db6dd1343d481e67f0cd2399e1b3e2/d6cae/67_blog-kubernetes-secrets.png 820w","sizes":"(min-width: 820px) 820px, 100vw"},"sources":[{"srcSet":"/static/67db6dd1343d481e67f0cd2399e1b3e2/913d0/67_blog-kubernetes-secrets.webp 205w,\n/static/67db6dd1343d481e67f0cd2399e1b3e2/91660/67_blog-kubernetes-secrets.webp 410w,\n/static/67db6dd1343d481e67f0cd2399e1b3e2/888e2/67_blog-kubernetes-secrets.webp 820w","type":"image/webp","sizes":"(min-width: 820px) 820px, 100vw"}]},"width":820,"height":460}}},"tableOfContents":true},"rawMarkdownBody":"Secrets Management is always a hot topic nowadays. Choosing the correct encryption algorithm, storing secrets in the right service, setting access to them; these are all actions that can make it or break it for your infrastructure.   \n\nIn this article, we will not only discuss how you should manage secrets in Kubernetes, but also help you understand why all these protection measures are vital for your Kubernetes clusters. \n\n## Secrets in Kubernetes \n\nSecrets are objects that contain keys, passwords, tokens. We're talking API keys, SSH keys, OAuth tokens, and others. Hackers dream of these every day and they put all their efforts into stealing them, so why wouldn’t you do the same, but for protecting them? \n\nHowever, even if they are the crown jewel of your Kubernetes cluster, they are actually stored unencrypted on etcd. That’s right. Anyone with access to etcd, as well as anyone with API access can retrieve (or even modify) a Secret. Moreover, [according to CNCF](https://kubernetes.io/docs/concepts/configuration/secret/), anyone who is authorized to create a Pod in a namespace can also read any Secret in the namespace. So, we’ve already found two big problems: Secrets are stored unencrypted, and a lot of users can have access to them if you’re not implementing the Least Privilege Principle (which you can read more about [here](https://cyscale.com/blog/check-for-least-privilege/)). Let’s see how to solve these issues. \n\n## Secrets Management Checklist \n\n### At rest encryption \n\nArguably the first step to securing secrets is encrypting them. At rest encryption ensures confidentiality. This means that if attackers get ahold of your secrets, they will not be able to read them unless they decrypt them. With [good key management and an appropriate cryptographic algorithm](https://cyscale.com/blog/protecting-data-at-rest/), you can keep attackers at bay. \n\n**Amazon EKS (Elastic Kubernetes Service)** \n\nTo enable secret encryption at rest in EKS, you must: \n\n1. Navigate to the EKS console. You can click [here](https://console.aws.amazon.com/eks/home#/clusters). \n2. Select the cluster for which you want to enable secret encryption. \n3. Under **Overview**, navigate to **Secrets Encryption** and select **Enable**. \n4. Choose a key from the drop-down list and select **Enable**. If you don’t already have a key, you must create one and return to this window. \n\nYou can also turn on secrets encryption for your Kubernetes clusters using this command: \n\n```html\naws eks associate-encryption-config --cluster-name <clusterName> --encryption-config '\\[{\"resources\":[\"secrets\"],\"provider\":{\"keyArn\":\"arn:aws:kms:<regionCode>:<account>:key/<key>\"}}]'\n```\n\n**AKS (Azure Kubernetes Service)** \n\nTo turn on KMS etcd encryption for an existing cluster, you can use the following command: \n\n```html\naz aks update --name <clusterName> --resource-group <resourceGroupName> --enable-azure-keyvault-kms --azure-keyvault-kms-key-vault-network-access \"Public\" --azure-keyvault-kms-key-id <keyID>\n```\n\nThis enables secret encryption using a publicly reachable Azure Key Vault. It assumes you already have an encryption key and a managed identity configured to allow access to the key. [Our article](https://cyscale.com/blog/azure-key-vault-explained/) explains more about Azure Key Vault and its configuration options. \n\n**GKE (Google Kubernetes Engine)** \n\nIn Google Cloud, Kubernetes secrets are encrypted at rest by default. However, you can turn on secrets encryption at the application layer. Here is how you can do it: \n\n1. Navigate to the Google Kubernetes Engine page in the Google Cloud console by clicking [here](https://console.cloud.google.com/kubernetes/list?_ga=2.113700551.1182343565.1709535826-1724752788.1707736657). \n2. Under **Security**, select the **Edit Application-layer Secrets Encryption** button. \n3. Select the **Enable Application-layer secrets encryption** checkbox and choose the key you want to use. \n4. Select **Save changes**. \n\n**Self-managed Kubernetes clusters** \n\n1. **To begin the process of encrypting your secrets at rest**, generate an encryption key. You can use a Key Vault or a KMS to do this. Then, you need to create a configuration file. Here is an example provided by CNCF: \n\n```html\napiVersion: apiserver.config.k8s.io/v1 \n\nkind: EncryptionConfiguration \n\nresources: \n\n- resources: \n\n- secrets \n\n- configmaps \n\n- pandas.awesome.bears.example \n\n    providers: \n\n- aescbc: \n\n          keys: \n\n- name: key1 \n\n              secret: <base64 encoded key> \n\n- identity: {}\n```\n\nAfter you base64-encode it, add the key as the secret value. \n\n2. Save the configuration file to /etc/kubernetes/enc/enc.yaml on the control plane node.  \n\nDon’t forget that your configuration file contains your key. Base64 encoding adds no security, so restrict permissions over the file as much as possible. \n\n3. Edit the manifest for the kube-apiserver static pod (/etc/kubernetes/manifests/kube-apiserver.yaml) to contain the following command: *\\--encryption-provider-config=/etc/kubernetes/enc/enc.yaml*. [Read more on the Kubernetes](https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/#write-an-encryption-configuration-file) website to see how to do this. \n\nAfter this, restart your API server to apply changes. After ensuring that all secrets are encrypted, remove the last line of the config file; “identity” allows for plaintext retrieval of secrets. \n\n### Key rotation \n\nKey management is just as important as the process of performing cryptographic operations. It doesn’t matter that your data is encrypted with the best encryption algorithm out there; if your key is leaked or stolen, an attacker can immediately decrypt your secret. So make sure to rotate your keys regularly to prevent data breaches. Let’s see how key rotation is handled in Kubernetes managed services and in self-managed clusters. \n\n**Amazon EKS (Elastic Kubernetes Service)** \n\nIf you followed the previous steps and enabled EKS secret encryption with a KMS key, rotation is very easy to setup. Navigate to the KMS service, and under **Customer managed keys**, select the key you used. Under **Key rotation**, check the checkbox and click Save. The key will now be automatically rotated every eyar. \n\n**AKS (Azure Kubernetes Service)** \n\nTo rotate the key in a key vault, you can use the following command: \n\n```html\naz aks update --name <clusterName> --resource-group <resourceGroupName> --enable-azure-keyvault-kms --azure-keyvault-kms-key-vault-network-access \"Public\" --azure-keyvault-kms-key-id <newKeyID>\n```\n\nRun the following command to re-encrypt secrets with the new key. \n\n```html\nkubectl get secrets --all-namespaces -o json | kubectl replace -f -\n```\n\n**GKE (Google Kubernetes Engine)** \n\nWhen you use the Google Cloud console to create a key, Cloud KMS sets the rotation period and next rotation time automatically. You can choose to use the default values or specify different values. \n\n**Self-managed Kubernetes clusters** \n\nThese are the steps to rotate your decryption key, according to [Kubernetes](https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/): \n\n1. Generate a new key securely and add it as the second entry for the current provider on all control plane nodes. Restart all kube-apiserver processes so that each server can decrypt data encrypted with the new key. \n2. Backup the new encryption key. If you lose it, you lose access to all data encrypted with it.  \n3. Make the new key the first entry in the keys array and restart all kube-apiserver processes. \n4. Run *kubectl get secrets --all-namespaces -o json | kubectl replace -f -* to encrypt all secrets with the new key. \n5. Remove the old key from the configuration. \n\n### RBAC and the Least Privilege Principle \n\nNow that we’ve taken care of at-rest encryption, let’s see how to assign permissions to users securely.  \n\nTo manage permissions for secrets and for other Kubernetes objects, we recommend using RBAC (Role-Based Access Control). RBAC allows you to assign fine-grained permissions with which users or groups of users can perform certain operations (such as create, read, update, or delete) on Kubernetes resources like pods, deployments, services, etc. \n\n**Roles, ClusterRoles, RoleBindings, ClusterRoleBindings**  \n\nRoles and ClusterRoles are two kinds of Kubernetes objects that describe the permissions users are given if they have that role. The basic Role sets the permissions over an object or a set of objects within a specific namespace, while the ClusterRole spans across all namespaces of the cluster. Below, you can see an example of a Role: \n\n```html\napiVersion: rbac.authorization.k8s.io/v1 \n\nkind: Role \n\nmetadata: \n\n  namespace: default \n\n  name: pod-reader \n\nrules: \n\n- apiGroups: [\"\"]  \n\n  resources: [\"pods\"] \n\n  verbs: [\"get\", \"watch\", \"list\"] \n```\n\nA ClusterRole would simply have “kind: ClusterRole”, and no namespace specified. \n\nNotice how this is a role definition and not a policy; it’s not assigned to any user or group of users. Here come into play RoleBindings and ClusterRoleBindings. These objects form the relation between a role and a user or a group of users. RoleBindings grants the permissions defined in the Role object, and ClusterRoleBindings binds ClusterRoles to users or groups across the entire Kubernetes cluster. \n\nYou can also reference a ClusterRole in a RoleBinding! This way lets you define a set of common rules across your entire cluster, ensuring consistency across namespaces. Be careful though to not grant users more permissions than necessary by using the ClusterRole. \n\n[This is an example](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#restrictions-on-role-creation-or-update) of a ClusterRole, assigned to the user “dave” in the “development” namespace using a RoleBinding. \n\n```html\napiVersion: rbac.authorization.k8s.io/v1 \n\nkind: RoleBinding \n\nmetadata: \n\n  name: read-secrets \n\n  namespace: development \n\nsubjects: \n\n- kind: User \n\n  name: dave  \n\n  apiGroup: rbac.authorization.k8s.io \n\nroleRef: \n\n  kind: ClusterRole \n\n  name: secret-reader \n\n  apiGroup: rbac.authorization.k8s.io\n```\n\nAlways remember to assign the minimum permissions necessary. This minimizes the attack surface and prevents privilege escalation in case one of your pods or users is compromised. To follow the Least Privilege Principle and protect your secrets, keep in mind the following best practices for Kubernetes: \n\n* Assign only the specific permissions you want a user to have. Instead of using wildcard (*) permissions, which may result in overly privileged roles, specify the verbs of the actions they’re allowed to perform, \n* Assign roles at the namespace-level rather than at cluster-level, to give users privileges only for the namespaces they use, \n* Perform regular access reviews to ensure everything is functioning correctly and users are not accessing resources they shouldn’t, \n* Monitor your Kubernetes cluster constantly to identify suspicious behaviour. \n\n### **Centralized Secrets Store providers** \n\nBy using a cloud Secrets Store solution, you can centralize secrets management and leave the storage, auditing, logging to the cloud provider. Moreover, if you integrate your Kubernetes cluster within the cloud using a managed solution (like EKS, AKS, GKE), you obtain a unified infrastructure. \n\nTo understand how much better Secrets Stores are, let’s look at the available solutions on the market.  \n\n**AWS Secrets Manager** is a centralized and secure solution for storing, managing, and rotating secrets. It offers fine-grained access control using AWS IAM, automatic rotation of secrets, secure storage, and monitoring capabilities. It is integrated with Kubernetes, allowing you to access secrets at runtime. AWS Secrets Manager keeps secrets encrypted at rest and sends them securely over SSL. \n\nBy using a managed solution, the pressure on developers decreases, allowing them to focus on their tasks. \n\n**Azure Key Vault** is a Secrets Store for secrets, cryptographic keys and certificates. It has advanced safety and recovery options, two permission models, and data plane and control plane separation. You can read more about Azure Key Vault [here](https://cyscale.com/blog/azure-key-vault-explained/). Azure Key Vault integrates seamlessly with Azure Kubernetes Service (AKS) and other Azure services. \n\n**Google Cloud Secret Manager** is Google Cloud’s version for storing secrets securely. Google Cloud Secret Manager offers a fully managed solution for storing and managing secrets, such as API keys, passwords, and certificates. It provides versioning, access controls, and audit logging capabilities, ensuring the secure storage and retrieval of sensitive information. \n\nUsing the [Secrets Store CSI Driver](https://kubernetes-csi.github.io/docs/) for Kubernetes secrets, Secrets stored in managed stores in the cloud can be treated as files mounted in Kubernetes pods, allowing for a seamless utilization of secrets with no added complexity but with maximum security. \n\nManaging secrets in Kubernetes is a critical aspect of securing your Kubernetes cluster. In this article, we’ve discussed secrets encryption at rest, RBAC, and managed Secrets Store solutions in the cloud. \n\nImplementing a comprehensive secrets management strategy is a difficult task, but one that you should not work on alone. Cyscale can detect if your Kubernetes secrets are at risk and provide remediation for any findings in no time.  \n\n[Book a demo](https://cyscale.com/request-demo/) now to see actionable insights and make use of hundreds of our security controls that constantly assess your environment, such as the following for Kubernetes: \n\n* Minimize wildcard use in Roles and ClusterRoles \n* Minimize access to secrets \n* Prefer using secrets as files over secrets as environment variables  \n\nMoreover, you can check out CIS Kubernetes Benchmark and CIS EKS Benchmark in our platform to see how secure your Kubernetes clusters are against attackers, with CIS AKS and CIS GKE Benchmarks arriving soon! \n\n<!--EndFragment-->"}},{"node":{"frontmatter":{"authors":"Ovidiu Cical","categories":["News","Cloud Security"],"title":"SMEs Face Security Pressure with Too Many Tools, Not Enough Skills","seoTitle":"SMEs face security pressure with too many tools, not enough skills","description":"IT admins at 56% of SMEs are concerned about their organization’s security posture, struggling with too many tools and a shortage of skills.","seoDescription":"IT admins at 56% of SMEs are concerned about their organization’s security posture, struggling with too many tools and a shortage of skills.","date":"2024-02-29T13:31:28.294Z","featuredpost":true,"permalink":"sme-security-pressure-too-many-tools-not-enough-skills","featuredimage":{"publicURL":"/static/932d8a07f2fcd720319c86b63f32a7cd/sme-security-pressure.png","childImageSharp":{"gatsbyImageData":{"layout":"constrained","images":{"fallback":{"src":"/static/932d8a07f2fcd720319c86b63f32a7cd/d6cae/sme-security-pressure.png","srcSet":"/static/932d8a07f2fcd720319c86b63f32a7cd/ac644/sme-security-pressure.png 205w,\n/static/932d8a07f2fcd720319c86b63f32a7cd/89b47/sme-security-pressure.png 410w,\n/static/932d8a07f2fcd720319c86b63f32a7cd/d6cae/sme-security-pressure.png 820w","sizes":"(min-width: 820px) 820px, 100vw"},"sources":[{"srcSet":"/static/932d8a07f2fcd720319c86b63f32a7cd/913d0/sme-security-pressure.webp 205w,\n/static/932d8a07f2fcd720319c86b63f32a7cd/91660/sme-security-pressure.webp 410w,\n/static/932d8a07f2fcd720319c86b63f32a7cd/888e2/sme-security-pressure.webp 820w","type":"image/webp","sizes":"(min-width: 820px) 820px, 100vw"}]},"width":820,"height":460}}},"tableOfContents":false},"rawMarkdownBody":"Security concerns are on the rise as the greatest challenge for IT admins at SMEs in Q1 2024, with 56% revealing that they’re more concerned about their organization’s security posture today than they were in April 2023.  \n\nAccording to [JumpCloud’s Q1 2024 SME IT Trends report](https://jumpcloud.com/resources/q1-2024-it-trends-for-small-and-medium-sized-enterprises-smes), which surveyed IT stakeholders in UK, US, and India, the implication is that SMEs could be more vulnerable to cyber-attack than other segments. The report highlighted concerns over security amid a shortage of specialist skills and additional pressure on IT teams around compliance, with over two-thirds (75%) saying that more compliance and regulation requirements have been mandated in their region. \n\nThese concerns are backed up by long term trends in compliance. The International Organization for Standardization, which maintains the framework for ISO27001, said in its most recent report that certifications for ISO27001 increased 51% between 2020 to 2022 as more companies bowed to pressure from their own customers to prove security hardening and compliance.  \n\n## AI adoption is adding fuel to the fire \n\nWhile AI is seen by some as a cost-effective way of plugging the skills gap left by sweeping layoffs and a general lack of experienced professionals in specific sectors (such as security and cloud), IT admins tasked with integrating AI appear less confident, JumpCloud found.  \n\nDespite a mostly positive attitude toward AI in their organization, admins also report significant unease around AI’s impact on organizational security, with nearly two-thirds (62%) agreeing that AI is outpacing their organization’s ability to protect against threats overall. \n\n## Too many tools to be effective\n\nAnother challenge, compounded by a lack of manpower to carry out tasks, is that IT admins find themselves juggling too many tools to do their job.  \n\nThe vast majority (75%) of global respondents continue to prefer a single tool for a specific job rather than several-point solutions, roughly the same as the 77% who said the same in April 2023.  \n\n## MSPs come out on top \n\nBut this is all good news for Managed Service Providers, which continue to be a go-to resource for organizations under pressure.  \n\nNearly 76% rely on an MSP for at least some features and the trend is that organizations are leaning on MSPs for increased responsibilities, where SMEs are lacking the skills or the tools, or the ability to use the tools effectively.  \n\nThe survey found that an MSP completely manages the IT environment for 42% of respondents in UK, US, and India, versus 27% in April 2023—a 56% increase over 12 months. \n\nTellingly, security is the most common function for which organizations use MSPs (57% in 2024 versus 53% in April 2023), and the most popular reason why is that SMEs believe MSPs are up to date on the latest technologies (65%, up from 61% in April 2023), suggesting that smaller organizations are plugging the skills gap for complex subjects like security, cloud, and AI, with outsourcing.  \n\n<div class='mt-16 rounded-tl-2xl rounded-b-2xl grid grid-cols-12 gap-4 bg-zircon py-8 px-4 lg:py-4' style='borderTopRightRadius: 3rem'>\n    <div class='col-span-12 lg:col-span-2'>\n        <div class='flex justify-center'>\n            <img src='/img/cloud-icon-widget.svg' alt='' id='img-text-button' />\n        </div>\n    </div>\n    <div class='col-span-12 lg:col-span-6 flex items-center justify-center'>\n         <p class='font-montserrat font-bold' id=\"paragraph-text-button\">\n            Unlock New Revenue Streams With<span id=\"font-gradient\">Cyscale Cloud Security for MSPs</span> \n        </p>\n    </div>\n    <div class='col-span-12 lg:col-span-4 flex justify-center items-center'>\n        <a class='mx-auto bg-gradient-to-r from-[#0F26AA] to-[#FF4A56] hover:from-[#FF4A56] hover:to-[#0F26AA] block font-medium rounded uppercase text-center no-underline hover:no-underline max-w-sm lg:inline-block font-hind' href='https://cyscale.com/use-cases/cloud-security-mssp/'>\n            <span style='padding: 0.625rem 2.5rem' class='text-white block'>\n                Show me\n            </span>\n        </a>\n    </div>\n</div> \n\n## Aggregation of tools and automation as the solution \n\nThese trends that JumpCloud has highlighted in the SME sector align closely with what we are hearing from the market and our own SME customer base.\n\nWhen it comes to cloud security specifically, IT admins and security professionals are struggling with multiple point solution tools that only apply to a single ecosystem. The cloud provider security tools only work for their own cloud, and skills for managing and securing that cloud are not transferable to another cloud either. This leaves SMEs struggling to meet security and compliance requirements and potentially losing business as a result.  \n\nSo, it comes as no surprise to see MSPs as the winners here. When small and medium businesses cannot get the skills in-house, but are seeing growing compliance pressures, they have no choice but to outsource the problem. What’s interesting is that MSPs and MSSPs face the same challenge, because the skills shortage is industry wide. But we work with a large number of managed service providers to help them unify their cloud security tools into a single platform and use automation to augment the security skills of their analysts to be transferable across all clouds and containerized environments. This means they can serve more customers with the same resources.\n\n<div class='mt-16 rounded-tl-2xl rounded-b-2xl grid grid-cols-12 gap-4 bg-zircon py-8 px-4 lg:py-4' style='borderTopRightRadius: 3rem'>\n    <div class='col-span-12 lg:col-span-2'>\n        <div class='flex justify-center'>\n            <img src='/img/cloud-icon-widget.svg' alt='' id='img-text-button' />\n        </div>\n    </div>\n    <div class='col-span-12 lg:col-span-6 flex items-center justify-center'>\n         <p class='font-montserrat font-bold' id=\"paragraph-text-button\">\n            See How Cyscale Unifies Multiple<span id=\"font-gradient\">Cloud Security</span> Tools\n        </p>\n    </div>\n    <div class='col-span-12 lg:col-span-4 flex justify-center items-center'>\n        <a class='mx-auto bg-gradient-to-r from-[#0F26AA] to-[#FF4A56] hover:from-[#FF4A56] hover:to-[#0F26AA] block font-medium rounded uppercase text-center no-underline hover:no-underline max-w-sm lg:inline-block font-hind' href='https://cyscale.com/full-platform-tour/'>\n            <span style='padding: 0.625rem 2.5rem' class='text-white block'>\n                Show me\n            </span>\n        </a>\n    </div>\n</div>"}},{"node":{"frontmatter":{"authors":"Sabrina Lupșan","categories":["News","Cloud Native Security"],"title":"Container Escaping with Leaky Vessels: A New Docker Vulnerability with 8.6 Severity ","seoTitle":"Container Escaping with Leaky Vessels: A New Docker Vulnerability with 8.6 Severity ","description":"Vulnerabilities in the runc CLI tool could allow attackers to escape containers and move laterally though a Kubernetes or cloud environment.","seoDescription":"Vulnerabilities in the runc CLI tool could allow attackers to escape containers and move laterally though a Kubernetes or cloud environment.","date":"2024-02-27T14:48:18.017Z","featuredpost":true,"permalink":"container-escaping-leaky-vessels-docker-vulnerability","featuredimage":{"publicURL":"/static/05f06f8d8982982a16b18b6104ea387f/leaky-vessels-container-escape.jpg","childImageSharp":{"gatsbyImageData":{"layout":"constrained","images":{"fallback":{"src":"/static/05f06f8d8982982a16b18b6104ea387f/2c0f5/leaky-vessels-container-escape.jpg","srcSet":"/static/05f06f8d8982982a16b18b6104ea387f/41be8/leaky-vessels-container-escape.jpg 205w,\n/static/05f06f8d8982982a16b18b6104ea387f/c78f7/leaky-vessels-container-escape.jpg 410w,\n/static/05f06f8d8982982a16b18b6104ea387f/2c0f5/leaky-vessels-container-escape.jpg 820w","sizes":"(min-width: 820px) 820px, 100vw"},"sources":[{"srcSet":"/static/05f06f8d8982982a16b18b6104ea387f/913d0/leaky-vessels-container-escape.webp 205w,\n/static/05f06f8d8982982a16b18b6104ea387f/91660/leaky-vessels-container-escape.webp 410w,\n/static/05f06f8d8982982a16b18b6104ea387f/888e2/leaky-vessels-container-escape.webp 820w","type":"image/webp","sizes":"(min-width: 820px) 820px, 100vw"}]},"width":820,"height":460}}},"tableOfContents":false},"rawMarkdownBody":"New vulnerabilities revealed in the runc command line tool could be exploited to allow attackers to escape containers and potentially get unauthorized access to the host operating system and move laterally though a Kubernetes or cloud environment.  \n\n## What are the Leaky Vessels vulnerabilities? \n\nOn the 31st of January 2024, Snyk revealed four Docker container vulnerabilities with a critical security score ranging between 8.6 and 10. These vulnerabilities allow attackers to escalate privileges and escape containers, gaining access to the underlying instance and possibly compromising secrets and other resources.  \n\nAn attacker exploiting an orchestration-based setup utilizing runc, such as Kubernetes, could execute a breakout onto the underlying Kubernetes node. In multi-tenant environments, pods from different tenants can share nodes, meaning a breakout could lead to unauthorized access to other pods belonging to other tenants. \n\nThe vulnerabilities affect runc, a container runtime, and Buildkit, a builder for docker: \n\n* [CVE-2024-21626](https://nvd.nist.gov/vuln/detail/CVE-2024-21626) \n* [CVE-2024-23651](https://nvd.nist.gov/vuln/detail/CVE-2024-23651) \n* [CVE-2024-23653](https://nvd.nist.gov/vuln/detail/CVE-2024-23653) \n* [CVE-2024-23652](https://nvd.nist.gov/vuln/detail/CVE-2024-23652) \n\nCVE-2024-21626, which affects runc, has a severity of 8.6. It occurs in runc versions 1.1.11 and earlier, so updating the CLI tool to version 1.1.12 would patch this vulnerability. \n\n## How does the Leaky Vessels exploit work? \n\nBy leveraging the “WORKDIR” command, the attacker can spawn a new process and have a working directory in the host’s filesystem. This can be done either by running a malicious image or by building a container image using a malicious Dockerfile. These two attacks can also be used to overwrite host binaries, thus escaping the container. \n\nContainer escape elevates the attackers’ privileges and opens up other possibilities; by having access to the underlying system of a container, a hacker can access files and secrets on the host and even move laterally to compromise other systems. \n\n<img src=\"/img/vulnerability-cyscale-leaky-vessels.png\" alt=\"\" title=\"\" class=\" blog-image-shadow \" style=\"width:auto;height:auto;\"/>\n\n## How do you fix it? \n\nTo determine if this vulnerability exists in your cloud or Kubernetes environment, you can [start a free risk assessment with Cyscale](https://cyscale.com/cloud-security-risk-assessment/). The Cyscale cloud security platform immediately detects vulnerabilities that can affect your cloud security posture and provides actionable remediation steps to help you fix findings quickly.\n\n<div class='mt-16 rounded-tl-2xl rounded-b-2xl grid grid-cols-12 gap-4 bg-zircon py-8 px-4 lg:py-4' style='borderTopRightRadius: 3rem'>\n    <div class='col-span-12'>\n        <div class='flex justify-center'>\n            <img src='/img/cloud-icon-widget.svg' alt='' id='img-text-button' />\n        </div>\n    </div>\n    <div class='col-span-12 flex items-center justify-center'>\n         <p class='font-montserrat font-bold' id=\"paragraph-text-button\">\n            See How Cyscale Helps Protect Against <span id=\"font-gradient\">Leaky Vessel</span> Vulnerabilities\n        </p>\n    </div>\n    <div class='col-span-12 flex justify-center items-center pb-4'>\n        <a class='mx-auto bg-gradient-to-r from-[#0F26AA] to-[#FF4A56] hover:from-[#FF4A56] hover:to-[#0F26AA] block font-medium rounded uppercase text-center no-underline hover:no-underline max-w-sm lg:inline-block font-hind' href='/cloud-security-risk-assessment/'>\n            <span style='padding: 0.625rem 2.5rem' class='text-white block'>\n                START RISK ASSESSMENT\n            </span>\n        </a>\n    </div>\n</div>"}},{"node":{"frontmatter":{"authors":"Ovidiu Cical","categories":["News","IAM"],"title":"Human and Non-Human Identity Management for Multi-Cloud","seoTitle":"Human and Non-Human Identity Management for Multi-Cloud","description":"To effectively use the cloud, you need to be able to trust non-human identities like service accounts used by applications, and third-parties. ","seoDescription":"To effectively use the cloud, you need to be able to trust non-human identities like service accounts used by applications, and third-parties. ","date":"2024-02-21T14:45:48.245Z","featuredpost":true,"permalink":"human-non-human-identity-management-multi-cloud","featuredimage":{"publicURL":"/static/2d02fbd03b9db96ca496e25efb12f75b/human-non-human-identity-cloud.png","childImageSharp":{"gatsbyImageData":{"layout":"constrained","images":{"fallback":{"src":"/static/2d02fbd03b9db96ca496e25efb12f75b/d6cae/human-non-human-identity-cloud.png","srcSet":"/static/2d02fbd03b9db96ca496e25efb12f75b/ac644/human-non-human-identity-cloud.png 205w,\n/static/2d02fbd03b9db96ca496e25efb12f75b/89b47/human-non-human-identity-cloud.png 410w,\n/static/2d02fbd03b9db96ca496e25efb12f75b/d6cae/human-non-human-identity-cloud.png 820w","sizes":"(min-width: 820px) 820px, 100vw"},"sources":[{"srcSet":"/static/2d02fbd03b9db96ca496e25efb12f75b/913d0/human-non-human-identity-cloud.webp 205w,\n/static/2d02fbd03b9db96ca496e25efb12f75b/91660/human-non-human-identity-cloud.webp 410w,\n/static/2d02fbd03b9db96ca496e25efb12f75b/888e2/human-non-human-identity-cloud.webp 820w","type":"image/webp","sizes":"(min-width: 820px) 820px, 100vw"}]},"width":820,"height":460}}},"tableOfContents":false},"rawMarkdownBody":"So far, Cyscale has focused on making it easy to see **who** (colleagues, collaborators, guests, fellow humans) has access to your cloud environments. Now you can also see **what**.  \n\n## Why are non-human identities important? \n\nNearly 90% of organizations routinely provide access privileges to non-humans, and 50% admit they have granted inappropriate access to non-humans*. But a similar number (54%) also revealed that inappropriate access granted to a non-employee or non-human has resulted in severe incidents, such as lost control of resources, data loss, and direct security breaches.    \n\n## Non-humans run the cloud \n\nIt’s become widely accepted that to effectively use the cloud, you need to trust non-human identities with access to resources and data in your environment. Such identities include service accounts used by applications, services, and third-party vendors. \n\nBut we frequently encounter environments among our own customer base with a non-human identity attached to a machine that has high or inappropriate privileges, is publicly accessible from the internet, and has a vulnerability.  \n\nAny attacker capable of exploiting that identity will be able to move laterally in the environment. \n\n## But humans use the cloud \n\nWhile it’s well established that [IAM (Identity and Access Management) plays an important role in a company’s security and compliance posture](https://cyscale.com/products/ciem/), and most organizations have specific policies in place so that the process of handling identities and access is well documented and manageable, the life of a CISO, CTO, or security analyst gets more difficult if they need to go into more depth. \n\nLet’s say you have an employee that’s leaving in a month, and you need to see a list of all the resources they have access to? Or you discover some unusual logs on one of your VMs and need to know who has access to it? These questions are not so easy to answer from your AWS, Azure, or Google Cloud console. \n\n<div class='grid grid-cols-12 mt-12 gap-2'>\n  <div class='col-span-12 lg:col-span-6'>\n    <img src=\"/img/inventory-permissions.png\" alt=\"Inventory display of assets accessible to user\" class=\"rounded-md\" style=\"width: 100%; margin: 0;\" />\n  </div>\n  <div class='col-span-12 lg:col-span-6'>\n    <img src=\"/img/inventory-accessible.png\" alt=\"Inventory view of database access control\" class=\"rounded-md\" style=\"width: 100%; margin: 0;\" />\n  </div>\n</div>\n\n\n<div class='mt-16 rounded-tl-2xl rounded-b-2xl grid grid-cols-12 gap-4 bg-zircon py-8 px-4 lg:py-4' style='borderTopRightRadius: 3rem'>\n    <div class='col-span-12 lg:col-span-2'>\n        <div class='flex justify-center'>\n            <img src='/img/cloud-icon-widget.svg' alt='' id='img-text-button' />\n        </div>\n    </div>\n    <div class='col-span-12 lg:col-span-6 flex items-center justify-center'>\n         <p class='font-montserrat font-bold' id=\"paragraph-text-button\">\n            See How Cyscale Helps Protect <span id=\"font-gradient\">Human and Non-Human</span> Identities\n        </p>\n    </div>\n    <div class='col-span-12 lg:col-span-4 flex justify-center items-center'>\n        <a class='mx-auto bg-gradient-to-r from-[#0F26AA] to-[#FF4A56] hover:from-[#FF4A56] hover:to-[#0F26AA] block font-medium rounded uppercase text-center no-underline hover:no-underline max-w-sm lg:inline-block font-hind' href='https://cyscale.com/products/ciem/'>\n            <span style='padding: 0.625rem 2.5rem' class='text-white block'>\n                Show me\n            </span>\n        </a>\n    </div>\n</div>\n\n## Cloud identity management is hard \n\nPopular security tools offered by the public cloud providers suffer from two main problems:  \n\n**1a)** They don’t really support comprehensive identity and access management functionality at all. They display users, roles, policies other IAM related entities, up to Permissions but that’s where they draw the line. The result is that you can’t state “User X has access to Resources A, B and C”.  \n\n**1b)** Let’s not even get started with non-human identities where a resource can use a service identity to access another resource.  \n\n **2)** They’re not meant specifically for this use case and require mastering some tools and languages beforehand such as Azure Resource Graph.  \n\nThis particular challenge is compounded by multi-cloud environments because the tools and the skills to use them, are not cross compatible.  \n\nLet’s say you’ve decided to go for the in-house tools from cloud providers and that you have an identity provider that helps you provision your users, groups and roles in your AWS and Azure environments. At this point, the users will receive access to both clouds.  \n\nSo, this means that managing identities will require two distinct sets of skills: both familiarity with the AWS IAM Access Analyzer and skills for easily getting from policies to resources AND knowledge of the query language used by Azure for exploring its Resource Graph.  \n\nOf course, there’s the alternative of using CLI tools to perform this analysis. There are even some great open-source tools to help you achieve the goal. However, this approach has its own limitations, like any CLI tool, and, if you’d like to go more in depth and see how the accessibility of a resource can impact other parts of the infrastructure, your journey stops there. \n\n## Managing human and non-human identities in Cyscale \n\nOur updated Identity dashboard now gives you an overview of the identities of your workloads across compute services (VMs, serverless, containers) and deep dive options to better understand the permissions, both human and non-human, when necessary, so you can now see: \n\n* A simplified view for each asset in your inventory, which tells you: \n* Who / What can access that asset  \n* What other resources can be accessed by that asset as a machine or non-human identity \n\n<img src=\"/img/identity-dashboard-service-accs.png\" alt=\"The Cyscale Identity dashboard\" title=\"\" class=\" blog-image-shadow \" style=\"width:90%;height:auto;\"/>\n\n\\*﻿\\*SailPoint: <https://www.sailpoint.com/blog/survey-finds-non-employee-and-non-human-identities-leading-to-major-security-issues/>\n"}}]}},"staticQueryHashes":["1117504136","120001781","2024892666","2199015418","220583031","273821743","3058837307","3355083976","3722074465","4068795820","4109069157","81406208","981947644"],"slicesMap":{}}