{"componentChunkName":"component---src-template-blog-template-js","path":"/blog/integrating-nats-into-the-cyscale-platform/","result":{"pageContext":{"alldata":{"frontmatter":{"authors":"Andrei Ștefănie","categories":["Engineering"],"title":"Integrating NATS Into the Cyscale Platform","seoTitle":null,"description":"Some concepts and techniques we leveraged to switch to a cloud-native message broker.","seoDescription":null,"date":"2021-12-22T10:11:16.968Z","featuredpost":true,"permalink":"integrating-nats-into-the-cyscale-platform","featuredimage":{"publicURL":"/static/f6d3c0d1c6563c2d1bdbbb31e7a2ac98/nats-horizontal-color.png","childImageSharp":{"gatsbyImageData":{"layout":"constrained","images":{"fallback":{"src":"/static/f6d3c0d1c6563c2d1bdbbb31e7a2ac98/55207/nats-horizontal-color.png","srcSet":"/static/f6d3c0d1c6563c2d1bdbbb31e7a2ac98/ac644/nats-horizontal-color.png 205w,\n/static/f6d3c0d1c6563c2d1bdbbb31e7a2ac98/7329d/nats-horizontal-color.png 410w,\n/static/f6d3c0d1c6563c2d1bdbbb31e7a2ac98/55207/nats-horizontal-color.png 820w,\n/static/f6d3c0d1c6563c2d1bdbbb31e7a2ac98/b1090/nats-horizontal-color.png 1640w","sizes":"(min-width: 820px) 820px, 100vw"},"sources":[{"srcSet":"/static/f6d3c0d1c6563c2d1bdbbb31e7a2ac98/913d0/nats-horizontal-color.webp 205w,\n/static/f6d3c0d1c6563c2d1bdbbb31e7a2ac98/85995/nats-horizontal-color.webp 410w,\n/static/f6d3c0d1c6563c2d1bdbbb31e7a2ac98/02dc4/nats-horizontal-color.webp 820w,\n/static/f6d3c0d1c6563c2d1bdbbb31e7a2ac98/62a3a/nats-horizontal-color.webp 1640w","type":"image/webp","sizes":"(min-width: 820px) 820px, 100vw"}]},"width":820,"height":461}}}},"rawMarkdownBody":"\n<!--StartFragment-->\n\n## Backstory\n\nCyscale helps you secure your cloud infrastructure. To achieve this, the platform must be able to read (sync) the cloud resources, perform assessments against a set of controls (security and architecture guidelines and best practices), send notifications, generate reports, perform scheduled tasks, and so on. Given the highly distributed and segregated nature of the platform, we chose a microservices architecture on top of Kubernetes. Also, by design, these processes are mostly asynchronous, happening in the background as a result of a certain event or trigger.\n\nBesides direct HTTP communication (REST mostly for the account/user management and GraphQL for everything cloud-related), we make heavy use of message-based communication.\n\nUp until recently, Redis served as our backbone for sending messages. We used Redis Lists to simulate queues (e.g., for sending emails) and Redis Pub/Sub for, well, implementing the publish-subscribe pattern (e.g., for triggering the synchronization of the cloud resources). We knew since the beginning that Redis will not serve as the messaging middleware forever, but we started with it since it was already there for caching and tasks (through [Go Celery](https://github.com/gocelery/gocelery)).\n\nDue to a mix of accumulated technical debt and a desire for simplicity, we decided to invest in integrating a purpose-built technology for handling messages. After a good amount of research covering topics such as operational simplicity, community, and documentation, we decided to go with [NATS](https://nats.io/). As a side note, we continue to love Redis and there are plenty of well-established companies using it as their messaging middleware with great success.\n\nThe rest of the article will cover the main steps we took to integrate NATS into our platform such as understanding the NATS ecosystem, deploying the relevant tools on our Kubernetes cluster using Helm - this will form the main part since this is where we faced the most challenges, and, of course, sending and consuming messages.\n\n<!--EndFragment-->\n\n<!--StartFragment-->\n\n**The NATS Ecosystem**\n\n![The NATS ecosystem encompassing the core NATS server, JetStream, the NATS clients and CLI, and the NATS resources for Kubernetes](/img/cyscale-nats.png 'The NATS ecosystem')\n\n### Core NATS\n\nAt its core, **the NATS server** is a **publish/subscribe** message broker. It offers **at most once delivery** and works based on **subjects**. These can have a hierarchical structure such as `sync.aws` and `sync.gcp`. Services concerned with messages related to syncing operations for AWS will only subscribe to `sync.aws` while other services might listen for all sync-related messages on `sync.*` (which covers both subjects) or even `sync.>` (which will also cover `sync.aws.ec2` - a separate subject).\n\nAnother feature that provides us with great value is called **queue groups**. This helps us horizontally scale our consumers while making sure that only one instance of a service receives a certain message. If you have experience with Kafka, it resembles consumer groups. What’s nice about queue groups is that they are automatically created when consumers subscribe to a subject and provide the queue group parameter (a simple string that, just like subjects, can have a hierarchical structure). For example, we use the name of the service (e.g. notifier) as the queue group.\n\nWhile the core functionality is great and simple, plain old pub/sub with at most once delivery will not cover all use cases. Subscribers might be under heavy load or even down, there might be a network partition or we might even want to keep messages and follow an approach based on event sourcing (you can find more examples in the [NATS docs](https://docs.nats.io/using-nats/developer/develop_jetstream)). In other words, as soon as we need **temporal decoupling** between publishers and subscribers, we need **persistence**, which for NATS is provided by JetStream.\n\n### JetStream\n\nJetStream adds the concept of **streams** on top of the core NATS subjects. Basically, if you want your messages to be persisted, you can enable JetStream on the NATS server and create a stream that will actually store the messages sent to a subject (or multiple subjects - this is mostly to optimize resource utilization; for example, we have one stream called sync that stores all messages sent to any sync subject - i.e. sync.>).\n\nIf your system takes full advantage of JetStream, at most once delivery transforms into **at least once** and even **exactly once** by leveraging [message deduplication](https://docs.nats.io/using-nats/developer/develop_jetstream/model_deep_dive#message-deduplication) (NATS will discard a message if another message with the same publisher-provided ID exists in the stream over a window of a certain time - 2 minutes by default).\n\nOne confusion we had at the beginning was whether we actually had to do anything to take advantage of JetStream besides enabling it. Again, bringing the simplicity up front, publishers will not require any modification unless you are looking for exactly-once delivery (you will have to add the message ID). They still send messages on a certain subject and, behind the scenes, JetStream will persist them in the configured stream.\n\nOn the other hand, **you do have to create the actual streams** (we will talk about this below) and **adjust the subscribers to use the JetStream API** (part of the client NATS library). Note that you can still use the core NATS API, but your subscribers will not receive messages sent before they started listening (even though they are stored in the stream). The reason behind this is that JetStream actually creates consumers that handle the delivery of messages for each subscriber. You will have to manually create the consumer when using the CLI, but the client libraries will handle this automatically when subscribing to a subject through the JetStream API.\n\nHaving the messages persisted also enables us to take different approaches based on what we want to achieve. We might still follow a pub/sub approach for certain subscribers (these are known as **push consumers**) (e.g. we use this approach for generating user-requested reports) or we might want to have more control over how messages are retrieved in which case we will use a **pull consumer**. This enables us to batch messages (e.g. we do this for sending notifications). Here is how we handle the messages in our notifier service:\n\n```typescript\nexport type MessageHandler = (data: NotificationDto[]) => Promise<void>;\n\nexport const handleNotificationMessages = async (handler: MessageHandler) => {\n    try {\n        const nc = await getNatsClient();\n\n        if (!process.env.NOTIFICATIONS_SUBJECT) {\n            throw Error('NOTIFICATIONS_SUBJECT not set');\n        }\n\n        const jc = JSONCodec<NotificationDto>();\n\n        const psub = await nc.jetstream().pullSubscribe(process.env.NOTIFICATIONS_SUBJECT, {\n            queue: 'notifier',\n            config: { durable_name: 'notifier' }\n        });\n\n        const done = (async () => {\n            let notifications: NotificationDto[] = [];\n            for await (const m of psub) {\n                try {\n                    notifications.push(jc.decode(m.data));\n                    m.ack(); // Wait to gather all messages from the current batch\n                    if (m.info.pending === 0) {\n                        await handler(notifications);\n                        logger.info(`Processing ${notifications.length} messages`);\n                        notifications = [];\n                    }\n                } catch (error) {\n                    logger.error(error);\n                }\n            }\n        })();\n\n        setInterval(() => {\n            psub.pull({ batch: 30, expires: 1000 });\n        }, 1000 * 30);\n\n        logger.info(`Listening for messages on ${process.env.NOTIFICATIONS_SUBJECT}`);\n\n        await done;\n        await psub.destroy();\n    } catch (e) {\n        logger.error(`Failed to initiate message listening ${e}`);\n    }\n};\n```\n\n(yes, most of our services are actually written in Go, hence the naming of some variables)\n\nAnother dilemma we faced was regarding **stream creation**. Who/what is responsible for creating the streams? One option is using the client libraries which expose a method to **idempotently** create streams. While this can work just fine, we didn’t want our services to bother with the technical details of NATS. Also, streams felt more like being part of the infrastructure than part of the actual services. So we continued our research and found [NACK](https://github.com/nats-io/nack) which we cover below.\n\nAs a side note regarding persistence/streaming with NATS, the precursor of JetStream is called STAN, which is now deprecated. We are mentioning this because there are still plenty of tutorials that focus on STAN, but JetStream is the way forward.\n\n<!--EndFragment-->\n\n<!--StartFragment-->\n\n## NATS on Kubernetes with Helm\n\nBeing part of the CNCF, we can expect NATS to have first-class support for Kubernetes. And it does.\n\nSince the entire Cyscale platform is specified as a Helm chart we just needed to add the [NATS](https://github.com/nats-io/k8s/tree/main/helm/charts/nats) subchart as a dependency and configure the values. You can check the [values file](https://github.com/nats-io/k8s/blob/main/helm/charts/nats/values.yaml) from the chart repo for reference. One small detail that cost us a few hours was how we were specifying the values for NATS. If you look at [the documentation](https://docs.nats.io/running-a-nats-service/introduction/running/nats-kubernetes/helm-charts#jetstream), you will notice the `nats` object. However, since we are deploying NATS as a subchart, we will need an additional parent `nats` object to instruct Helm to pass the values down to the nats subchart. Here are our values for NATS on the dev cluster:\n\n```yaml\nnats:\n  nats:\n    image: nats:alpine\n    resources:\n      requests:\n        cpu: 100m\n        memory: 100Mi\n      limits:\n        cpu: 200m\n        memory: 200Mi\n    jetstream:\n      enabled: true\n      memStorage:\n        enabled: true\n        size: 80Mi\n      fileStorage:\n        enabled: true\n        size: 1Gi\n        storageDirectory: /data/\n        storageClassName: default\n```\n\n(notice the two `nats`)\n\nBesides the actual NATS server (which is a container running in the NATS pod along with the monitoring and config reloader containers), we also have a **NATS Box** pod (comes with the NATS Helm chart) that helps us with testing and administrative tasks - basically its a **preconfigured NATS CLI**. We access it using the command `kubectl exec -it <nats-box-container> -- /bin/sh -l`. The other alternative would have been to install the NATS CLI on our machines and port forward the NATS server from the cluster.\n\n### Creating the Streams with NACK\n\nBesides NATS, we also added the [NACK subchart](https://github.com/nats-io/k8s/tree/main/helm/charts/nack) which requires the NACK **CRDs** (install using `kubectl apply -f <https://raw.githubusercontent.com/nats-io/nack/v0.6.0/deploy/crds.yml>`). That’s because it enables us to treat JetStream streams as Kubernetes resources deployed as part of the rest of the platform.\n\nInstead of having our services handle the stream creation or manually creating them from the NATS box, we specify them declaratively as follows (`templates/nats-streams.yaml`):\n\n```yaml\n# See https://github.com/nats-io/nack/blob/main/deploy/crds.yml for more properties\n{{- range .Values.nack.streams }}\napiVersion: jetstream.nats.io/v1beta2\nkind: Stream\nmetadata:\n  name: {{ .name | quote }}\nspec:\n  name: {{ .name }}\n  subjects: {{ .subjects }}\n  storage: {{ .storage | quote | default \"file\" }}\n  retention: {{ .retention | quote | default \"limits\" }}\n---\n{{- end }}\n```\n\nWe also declare the streams as a list in the values file (notice the `range`).\n\nOnce these are deployed, you can inspect the streams just like any other k8s resource using `kubectl get streams`. One issue we faced was that the streams were not actually created in JetStream (`nats stream ls` from the nats box) even though the k8s resources existed. We simply manually deleted them from the cluster (`kubectl delete streams.jetstream.nats.io --all`) and re-deployed the helm chart.\n\nThere is another alternative we considered - the [jetstream Terraform provider](https://registry.terraform.io/providers/nats-io/jetstream/latest/docs). While we do use Terraform to declare our infrastructure on top of which the Kubernetes cluster is running, we chose NACK because it fit our abstraction layers best and because the terraform provider, running locally or in our pipelines, has to somehow reach the NATS server. In our case, the NATS server is not exposed outside of the cluster (again, port-forwarding is an option).\n\n### Ending Notes\n\nWhile there are more subjects to cover such as [authentication](https://docs.nats.io/running-a-nats-service/configuration/securing_nats/auth_intro) and [authorization](https://docs.nats.io/running-a-nats-service/configuration/securing_nats/authorization), clustering (and [super-clusters](https://docs.nats.io/running-a-nats-service/configuration/gateways)), and multi-tenancy using [accounts](https://docs.nats.io/running-a-nats-service/configuration/securing_nats/accounts), we hope this article helps you better understand how NATS works and how to deploy it. This is our way of giving back to a growing community and expressing our appreciation for getting to work with such great technologies.\n\n<!--EndFragment-->\n"},"suggestions":[{"node":{"frontmatter":{"authors":"Sabrina Lupșan","categories":["CSPM"],"title":"Securing Your Cloud: Essential Tips for Your Business","seoTitle":"Securing Your Cloud: Essential Tips for Your Business","description":"In today's digital landscape, cloud computing has become essential for organizations looking to streamline their operations and enhance their business agility. As the adoption of cloud-native infrastructure continues to grow, so does the need for effective cloud security measures. \n\nThis article will look at a high-level overview of the steps to establish a security plan: performing a risk assessment, conducting an incident response plan, monitoring and evaluating how that plan is working, and making efforts to become compliant with international standards.","seoDescription":"In today's digital landscape, cloud computing has become essential for organizations looking to streamline their operations and enhance their business agility. As the adoption of cloud-native infrastructure continues to grow, so does the need for effective cloud security measures.   This article will look at a high-level overview of the steps to establish a security plan. ","date":"2023-05-18T10:05:42.486Z","featuredpost":true,"permalink":"essential-tips-cloud-security","featuredimage":{"publicURL":"/static/c2a50b70b46e482e5f332299023b6d4e/41_blog-cover.png","childImageSharp":{"gatsbyImageData":{"layout":"constrained","images":{"fallback":{"src":"/static/c2a50b70b46e482e5f332299023b6d4e/d6cae/41_blog-cover.png","srcSet":"/static/c2a50b70b46e482e5f332299023b6d4e/ac644/41_blog-cover.png 205w,\n/static/c2a50b70b46e482e5f332299023b6d4e/89b47/41_blog-cover.png 410w,\n/static/c2a50b70b46e482e5f332299023b6d4e/d6cae/41_blog-cover.png 820w","sizes":"(min-width: 820px) 820px, 100vw"},"sources":[{"srcSet":"/static/c2a50b70b46e482e5f332299023b6d4e/913d0/41_blog-cover.webp 205w,\n/static/c2a50b70b46e482e5f332299023b6d4e/91660/41_blog-cover.webp 410w,\n/static/c2a50b70b46e482e5f332299023b6d4e/888e2/41_blog-cover.webp 820w","type":"image/webp","sizes":"(min-width: 820px) 820px, 100vw"}]},"width":820,"height":460}}}},"rawMarkdownBody":"C﻿loud computing has become crucial for businesses seeking to streamline their operations and boost their company agility in the current digital landscape. Effective cloud security solutions are becoming necessary as cloud-native infrastructure adoption grows.\n\nT﻿his article will look at a high-level overview of the steps needed to establish a security plan.\n\n## 1﻿. Risk assessment\n\nA﻿ successful security plan for cloud security must begin with a thorough risk assessment. The assessment should identify the following:\n\n* a﻿ny potential threats to the company's systems,\n* v﻿ulnerabilities, and\n* r﻿isks associated with the cloud environment.\n\nT﻿he assessment should take into consideration the type of data stored in the cloud, the level of access granted to different users, and the efforts conducted to mitigate risks.\n\n## 2. Compliance frameworks \n\nAnother important component of a successful security plan is compliance frameworks. Compliance requirements can vary by industry and location, and businesses must ensure they follow relevant regulations and standards.  \n\nWell-known and accredited standards include: \n\n* GDPR,  \n* [ISO 27001](https://cyscale.com/blog/new-iso27001-2022-version/),  \n* PCI-DSS, \n* HIPAA, \n* DORA, \n* [SOC 2](https://cyscale.com/blog/soc-2-compliance-in-cloud/), and others. \n\nCompliance frameworks provide guidelines and best practices for securing data and systems in the cloud environment.  \n\nEstablish which standard fits your business. For example, [PCI-DSS](https://cyscale.com/blog/pci-dss-compliance-in-cloud/) (Payment Card Industry Data Security Standard) is a framework related to information security that regulates credit and debit card transactions, while [HIPAA](https://cyscale.com/blog/hipaa-compliance-in-cloud/) (The Health Insurance Portability and Accountability Act of 1996) is a federal law that defines rules regarding medical records and PHI. \n\n## 3. Incident response planning \n\nIncident response planning is also critical to a successful cloud security plan. An incident response plan outlines the steps to be taken in the event of a security breach or other incident. Some of the steps are: \n\n### 1﻿. Determine what caused the incident.\n\nF﻿inding the incident's cause is the first step in incident response. This could entail reviewing security rules and procedures, looking over employees interviews, and reviewing system logs.\n\n### 2﻿. Contain the incident\n\nT﻿he response team should take actions to contain the event after the incident's cause has been found. some actions include:\n\n* i﻿solating affected systems,\n* b﻿locking access to sensitive data, and\n* d﻿isabling compromised user accounts.\n\nT﻿his goal is to prevent the incident from spreading and causing further damage.\n\n### 3﻿. Notify affected parties\n\nT﻿he event must be reported to the affected parties as soon as possible. This may include:\n\n* c﻿ustomers,\n* e﻿mployees,\n* p﻿artners, and\n* r﻿egulatory bodies.\n\nT﻿he notification should contain:\n\n* i﻿nformation about the incident,\n* w﻿hat steps are being take to address it,\n* h﻿ow the incident can affect the stakeholders.\n\nT﻿he response team should also answer any questions that may arise, as well as provide ongoing updates as needed.\n\n### 4﻿. Conduct a root cause analysis\n\nT﻿he response team should carry out a root cause analysis to determine the incident's primary cause after it has been contained. This will aid in avoiding future similar incidents.\n\n### 5. Implement remediation measures\n\nThis may involve: \n\n* updating security policies and procedures,  \n* enhancing security controls, and  \n* providing additional employee training.  \n\nThe goal is to reduce the likelihood of future incidents and protect the organization's assets and reputation. \n\n## 4. Monitor and evaluate your plan \n\nAfter going through the previous stages and ensuring that your company has implemented the necessary best practices, you must monitor the security plan and ensure it works accordingly.  \n\nMoreover, the threat landscape constantly evolves, and businesses must remain vigilant to new threats and vulnerabilities. Therefore, even if you have a good security strategy, remain adaptive and ensure ongoing defense against new threats.  \n\nBusinesses may safeguard their sensitive information and assets, reduce the risk of security events, and ensure the continuity of company operations by adopting a proactive and strategic approach to cloud security."}},{"node":{"frontmatter":{"authors":"Sabrina Lupșan","categories":["CSPM","CNAPP"],"title":"Cloud-Native Security Tools for Multi-Cloud Environments","seoTitle":"Cloud-Native Security Tools for Multi-Cloud Environments","description":"As organizations continue to move their workloads to the cloud, security concerns have become a top priority for CISOs. Cloud-native security solutions should be designed to provide contextual alerts for misconfigurations and vulnerabilities, should help organizations meet regulatory compliance requirements and automate security processes. Using Cyscale, a CNAPP tool, you can bring together multi-cloud infrastructures and secure your environment whether it is using AWS, Azure, GCP or more than one provider.","seoDescription":"As organizations continue to move their workloads to the cloud, security concerns have become a top priority for CISOs. Cloud-native security solutions should be designed to provide contextual alerts for misconfigurations and vulnerabilities, should help organizations meet regulatory compliance requirements and automate security processes. Using Cyscale, a CNAPP tool, you can bring together multi-cloud infrastructures and secure your environment whether it is using AWS, Azure, GCP or more than one provider.","date":"2023-05-16T10:06:37.307Z","featuredpost":true,"permalink":"cloud-native-tools-multi-cloud","featuredimage":{"publicURL":"/static/045cf43cc4592dfab689d7f63aa0f806/40_blog-cover-cnapp-multi-cloud-tools.png","childImageSharp":{"gatsbyImageData":{"layout":"constrained","images":{"fallback":{"src":"/static/045cf43cc4592dfab689d7f63aa0f806/d6cae/40_blog-cover-cnapp-multi-cloud-tools.png","srcSet":"/static/045cf43cc4592dfab689d7f63aa0f806/ac644/40_blog-cover-cnapp-multi-cloud-tools.png 205w,\n/static/045cf43cc4592dfab689d7f63aa0f806/89b47/40_blog-cover-cnapp-multi-cloud-tools.png 410w,\n/static/045cf43cc4592dfab689d7f63aa0f806/d6cae/40_blog-cover-cnapp-multi-cloud-tools.png 820w","sizes":"(min-width: 820px) 820px, 100vw"},"sources":[{"srcSet":"/static/045cf43cc4592dfab689d7f63aa0f806/913d0/40_blog-cover-cnapp-multi-cloud-tools.webp 205w,\n/static/045cf43cc4592dfab689d7f63aa0f806/91660/40_blog-cover-cnapp-multi-cloud-tools.webp 410w,\n/static/045cf43cc4592dfab689d7f63aa0f806/888e2/40_blog-cover-cnapp-multi-cloud-tools.webp 820w","type":"image/webp","sizes":"(min-width: 820px) 820px, 100vw"}]},"width":820,"height":460}}}},"rawMarkdownBody":"As organizations continue to move their workloads to the cloud, security concerns have become a top priority for CISOs. With multi-cloud environments becoming the new norm, cloud-native security tools have emerged as the go-to solutions for securing: \n\n* cloud infrastructures,  \n* cloud-native applications,  \n* and cloud services. \n\n## What is Cloud-Native Security and How Do You Achieve it? \n\nCloud-native security refers to security measures that are specifically designed to protect cloud-native environments. As organizations adopt cloud platforms, security vulnerabilities become more complex, and traditional security solutions are no longer capable of delivering reliable insights.  \n\nTo address these challenges, cloud-native security tools should be designed to: \n\n* provide real-time, [contextual alerts for misconfigurations](https://cyscale.com/blog/prevent-alert-fatigue/),  \n* help organizations meet compliance requirements, and \n* automate security processes. \n\nThrough targeted alerts, users obtain insights into their cloud computing infrastructure and can, contextually, see how misconfigurations impact their apps. Utilizing contextual alerting, security teams can easily identify and prioritize crown jewel assets and by cutting through the noise avoid the alert fatigue which is commonplace in most organizations. \n\nTo help meet compliance requirements, cloud-native tools provide auto-generated compliance reports, aiding companies with their audit process, as well as metrics to accurately measure the progress.  \n\nBy automating security processes, DevOps teams can streamline the software development lifecycle of their applications and shift their attention to important aspects. Risk caused by human error is reduced, and security policies are guaranteed to be consistently applied across all cloud environments. \n\n## Cloud-Native Security Tools in Multi-Cloud Environments \n\nAchieving complete security and compliance in multi-cloud environments is extremely challenging. It is time-consuming to correlate all assets, their relationships, and the risk attached to them across multiple cloud service providers such as AWS, Azure, and GCP as each cloud provider comes with its own tools.  \n\nLet's look at the options companies currently have to secure their cloud: \n\nFor Microsoft Azure: \n\n* Azure Defender for Cloud,  \n* Azure Active Directory,  \n* Azure Firewall, and others. \n\nFor AWS (Amazon Web Services): \n\n* AWS Identity and Access Management (IAM), \n* AWS WAF (Web Application Firewall), \n* AWS GuardDuty. \n\nFor GCP: \n\n* Google Cloud Security Command Center, \n* Google Cloud IAM, \n* Google Cloud Armor. \n\nHowever, these tools are typically designed to work within their own ecosystem. To cover multi-cloud systems and to obtain a clear understanding of each system’s security, a company needs a more comprehensive, purpose-built solution. \n\nThe answer to this problem is a centralized platform for managing application security across all environments. A [CNAPP (Cloud-Native Application Protection Platform)](https://cyscale.com/blog/cnapp-secure-native-applications/) is a security solution designed to protect cloud-native applications. It combines the following functionalities: \n\n* CSPM (Cloud Security Posture Management), \n* CWPP (Cloud Workload Protection Platform), \n* CIEM (Cloud Infrastructure Entitlements Management), \n* KSPM (Kubernetes Security Posture Management, and  \n* Container security. \n\nA CNAPP tool is capable of providing: \n\n1. Visibility, \n2. Security controls, \n3. Compliance features, \n4. Container image scanning,  \n5. [IAM (Identity and Access Management)](https://cyscale.com/blog/iam-services-in-aws-azure-gcp) assessments, and many others. \n\nA key advantage of CNAPP solutions is their ability to integrate with all cloud providers. This allows them to monitor cloud workloads and provide real-time alerts and remediation steps for their users. \n\n**Cyscale** is a [CNAPP tool](https://cyscale.com/products/cnapp/) that brings together multi-cloud infrastructures and, using powerful dashboards and security controls automatically highlights misconfigurations and vulnerabilities, saving teams considerable time on remediation.  \n\nUsing this security platform, users can ensure that their cloud native technologies are in good hands. In the Cyscale app, you can find the following: \n\n* Over 400 controls across AWS, Azure, GCP that check for misconfigurations and contain remediation steps to safeguard sensitive data, \n* Powerful dashboards, such as the ones for Data Security, IAM, or Containers, \n* Many compliance frameworks with editable policies and metrics to track your company’s progress and help it in the audit process, and others. \n\nIn conclusion, cloud-native security tools are essential for maintaining cybersecurity in a multi-cloud environment and delivering a consistent risk-based view to the business."}},{"node":{"frontmatter":{"authors":"Sabrina Lupșan","categories":["News","CSPM"],"title":"Secure Your Cloud Stack Now with our New Data Security E-book! ","seoTitle":"Secure Your Cloud Stack Now with our New Data Security E-book! ","description":"Our new e-book on data security contains best practices on how to encrypt and classify data, how to secure your cloud environment and many other recommendations to protect data. Read our comprehensive guide to expand your knowledge.","seoDescription":"Our new e-book on data security contains best practices on how to encrypt and classify data, how to secure your cloud environment and many other recommendations to protect data. Read our comprehensive guide to expand your knowledge.","date":"2023-05-10T12:19:20.367Z","featuredpost":true,"permalink":"data-security-e-book","featuredimage":{"publicURL":"/static/973c297f7ce86cd803f2ce774147dceb/blog_39-cover-ebook.png","childImageSharp":{"gatsbyImageData":{"layout":"constrained","images":{"fallback":{"src":"/static/973c297f7ce86cd803f2ce774147dceb/2c0f5/blog_39-cover-ebook.jpg","srcSet":"/static/973c297f7ce86cd803f2ce774147dceb/41be8/blog_39-cover-ebook.jpg 205w,\n/static/973c297f7ce86cd803f2ce774147dceb/c78f7/blog_39-cover-ebook.jpg 410w,\n/static/973c297f7ce86cd803f2ce774147dceb/2c0f5/blog_39-cover-ebook.jpg 820w","sizes":"(min-width: 820px) 820px, 100vw"},"sources":[{"srcSet":"/static/973c297f7ce86cd803f2ce774147dceb/913d0/blog_39-cover-ebook.webp 205w,\n/static/973c297f7ce86cd803f2ce774147dceb/91660/blog_39-cover-ebook.webp 410w,\n/static/973c297f7ce86cd803f2ce774147dceb/888e2/blog_39-cover-ebook.webp 820w","type":"image/webp","sizes":"(min-width: 820px) 820px, 100vw"}]},"width":820,"height":460}}}},"rawMarkdownBody":"We have emphasized many times how important data security is, and we have decided to write a comprehensive guide to help you implement the most important best practices! \n\nIn the paper, you will find: \n\n* How to encrypt in motion, in use and at rest data, \n* What data classification is and why you should implement it, \n* An in-depth guide to securing your AWS cloud environment from encryption, data loss prevention, to S3 bucket security, \n* Solutions for these problems through cloud security controls and a data security dashboard. \n\n[Download the e-book now](https://cyscale.com/resources/data-security-e-book.pdf) to read up-to-date recommendations regarding data security in the cloud and expand your knowledge."}},{"node":{"frontmatter":{"authors":"Sabrina Lupșan","categories":["CSPM"],"title":"Cloud-Native Infrastructure: How to Build a Comprehensive Security Plan","seoTitle":"Cloud-Native Infrastructure: How to Build a Comprehensive Security Plan","description":"As more organizations adopt a cloud-native approach to support their business operations, security may sometimes be left out of their initial plans. Moreover, a cloud-native infrastructure requires a different methodology in terms of securing it, since it has unique characteristics such as microservices, containers, serverless computing, and others.\nTo secure your cloud-native infrastructure, ensure you have good visibility over your environment, fix all findings and reach a robust cloud security posture, and continuously monitor your infrastructure.","seoDescription":"As more organizations adopt a cloud-native approach to support their business operations, security may sometimes be left out of their initial plans. Moreover, a cloud-native infrastructure requires a different methodology in terms of securing it, since it has unique characteristics such as microservices, containers, serverless computing, and others. To secure your cloud-native infrastructure, ensure you have good visibility over your environment, fix all findings and reach a robust cloud security posture, and continuously monitor your infrastructure.","date":"2023-04-13T11:40:40.049Z","featuredpost":true,"permalink":"cloud-native-security","featuredimage":{"publicURL":"/static/7a22eee1a09f9abb1a3834f0924b5686/blog_38-cover.png","childImageSharp":{"gatsbyImageData":{"layout":"constrained","images":{"fallback":{"src":"/static/7a22eee1a09f9abb1a3834f0924b5686/d6cae/blog_38-cover.png","srcSet":"/static/7a22eee1a09f9abb1a3834f0924b5686/ac644/blog_38-cover.png 205w,\n/static/7a22eee1a09f9abb1a3834f0924b5686/89b47/blog_38-cover.png 410w,\n/static/7a22eee1a09f9abb1a3834f0924b5686/d6cae/blog_38-cover.png 820w","sizes":"(min-width: 820px) 820px, 100vw"},"sources":[{"srcSet":"/static/7a22eee1a09f9abb1a3834f0924b5686/913d0/blog_38-cover.webp 205w,\n/static/7a22eee1a09f9abb1a3834f0924b5686/91660/blog_38-cover.webp 410w,\n/static/7a22eee1a09f9abb1a3834f0924b5686/888e2/blog_38-cover.webp 820w","type":"image/webp","sizes":"(min-width: 820px) 820px, 100vw"}]},"width":820,"height":460}}}},"rawMarkdownBody":"As more organizations adopt a cloud-native approach to support their business operations, security may sometimes be left out of their initial plans. Moreover, a [cloud-native infrastructure](https://cyscale.com/blog/cloud-native-security-guide/) requires a different methodology in terms of securing it, since it has unique characteristics such as: \n\n* Microservices, \n* Containers, \n* Serverless computing, and others. \n\nThese differences pose new security challenges, and in this article we will look at best practices for securing cloud-native environments and how to remediate any cybersecurity drifts. \n\n## Understanding your cloud-native infrastructure \n\nThe first step to building a comprehensive security plan is understanding every side of your cloud computing environment. This means that visibility is the first aspect we need to talk about.  \n\nVisibility is the foundation on which security is built. Without visibility into your infrastructure, you cannot effectively secure your cloud resources, monitor for threats, detect anomalies, or respond to incidents. \n\nFor example, with microservices and containers, it can be challenging to maintain visibility, as these components are constantly changing and evolving. \n\nTo achieve visibility, you need to establish an inventory of all cloud resources, understand their relationships and how they are situated in relation to the Internet, as well as continuously monitor them to understand normal behavior. At the end of the article, we explain how this tedious process can be resolved very efficiently. \n\n## Assessing your infrastructure \n\nAfter gaining visibility into your infrastructure, it’s time to thoroughly check your resources for misconfigurations and vulnerabilities.  \n\nWe’ve comprised a list of common misconfigurations in cloud-native environments: \n\n### 1. Incorrect container configurations \n\nThis is a broad category that includes: \n\n* overly permissive container privileges,  \n* unpatched vulnerabilities,  \n* poor access control, and others. \n\nRunning containers with excessive permissions, such as root, can lead to compromising the entire VM if the container is escaped. This misconfiguration is common because, by running a container as root, the administrator does not have to input their password for privileged actions. \n\nFailing to update and patch containers and their underlying operating systems can lead to critical attacks that expose your cloud infrastructure. \n\nPoor access control can result in unauthorized access to sensitive data, such as passwords and encryption keys, as well as privilege escalation risks. Privilege escalation occurs when an attacker gains access to a low-privileged user and pivots to a higher-privileged user, possibly obtaining access to more resources and further attack paths. \n\n### 2. Missing or inadequate encryption \n\nEncryption is a must-have in your cloud security plan. Protect data in transit and at rest by encrypting it with industry-recommended cryptographic algorithms and by having a robust key management system. Read more about encryption best practices [here](https://cyscale.com/blog/types-of-encryption/). \n\n### 3. Unsecured storage resources \n\nUnencrypted storage volumes, misconfigured database permissions, buckets with public access enabled… there are many storage resources, and it's easy to lose track of them and their configurations. It's enough to allow public access to one cloud asset to compromise your entire environment if, for example, you're storing keys there.  \n\nSecure your storage resources by: \n\n* blocking public access to buckets using access lists and policies, \n* performing consistent backups and ensuring that those backups are stored in different geographical areas, \n* placing your databases in Virtual Private Clouds (VPCs) and only allowing whitelisted IPs to connect to databases, and many others. \n\nWe have a [whitepaper about cloud storage misconfigurations](https://cyscale.com/whitepaper/cloud-storage-misconfigurations/) that goes into great detail on how to protect them. \n\n### 4. Improper network security \n\nNetwork security is a critical aspect of cloud-native security, as it helps to ensure that network traffic is appropriately filtered and secured. One of the key features of network security is Network Security Groups (NSGs).  \n\nNSGs are virtual firewalls that allow you to filter inbound and outbound traffic to and from your resources. They can be used to: \n\n* restrict access to specific ports and protocols, such as blocking access to SSH, \n* blocking traffic originating from certain IPs, \n* monitoring traffic to detect suspicious activity. \n\n## Drawing conclusions and building an efficient plan \n\nIt’s easy to fall short when securing your cloud environment; we know how difficult it is to obtain contextual visibility, check all of your resources, and implement remediation as fast as possible. But we've got you covered. \n\nThese are the steps to secure your cloud-native infrastructure: \n\n* ensure you have good visibility over your environment, \n* fix all findings and reach a robust cloud security posture, \n* continuously monitor your infrastructure. \n\nUsing the Cyscale platform, you have access to several powerful dashboards that enable you to see, in real-time, your assets, their relationships, misconfigurations, as well as existing accounts and IAM permissions. Gain complete visibility using: \n\n* A general dashboard, with an overall view of the company’s cloud environments, as well as an asset inventory, \n* A [Data Security Dashboard](https://cyscale.com/blog/data-security-dashboard/), which delivers a comprehensive view over data at rest storage assets and keys, using DSPM (Data Security Posture Management) capabilities, \n* [An Identity Dashboard](https://cyscale.com/blog/check-for-least-privilege/), that helps users understand the impact of IAM permissions. \n\nBesides these dashboards, you have access to 400+ controls across multiple cloud service providers such as AWS, Azure, and Google Cloud that check your entire infrastructure for misconfigurations. On top of this, you get remediation steps that help you adjust your settings in no time."}}],"whitepaperCover":{"data":{"whitepaperCover":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","images":{"fallback":{"src":"/static/cdbd5693af50ac8bf55f2d978315946c/4c8e8/whitepaper-cover-blog.png","srcSet":"/static/cdbd5693af50ac8bf55f2d978315946c/4c8e8/whitepaper-cover-blog.png 111w","sizes":"111px"},"sources":[{"srcSet":"/static/cdbd5693af50ac8bf55f2d978315946c/891d3/whitepaper-cover-blog.webp 111w","type":"image/webp","sizes":"111px"}]},"width":111,"height":162}}}}},"blueBird":{"data":{"blueBird":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","images":{"fallback":{"src":"/static/a7e41d4813d3dfc105b466b26564c454/42463/cyscale-blue-bird.png","srcSet":"/static/a7e41d4813d3dfc105b466b26564c454/42463/cyscale-blue-bird.png 386w,\n/static/a7e41d4813d3dfc105b466b26564c454/74bb1/cyscale-blue-bird.png 772w","sizes":"386px"},"sources":[{"srcSet":"/static/a7e41d4813d3dfc105b466b26564c454/e03ca/cyscale-blue-bird.webp 386w,\n/static/a7e41d4813d3dfc105b466b26564c454/e7f31/cyscale-blue-bird.webp 772w","type":"image/webp","sizes":"386px"}]},"width":386,"height":351}}}}},"compliceToolbox":{"data":{"blueBird":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","images":{"fallback":{"src":"/static/ff00ea5b4c39c823654efd65ff4bc449/91b0f/compliance-toolbox-blog.png","srcSet":"/static/ff00ea5b4c39c823654efd65ff4bc449/91b0f/compliance-toolbox-blog.png 366w,\n/static/ff00ea5b4c39c823654efd65ff4bc449/d39b6/compliance-toolbox-blog.png 732w","sizes":"366px"},"sources":[{"srcSet":"/static/ff00ea5b4c39c823654efd65ff4bc449/7257f/compliance-toolbox-blog.webp 366w,\n/static/ff00ea5b4c39c823654efd65ff4bc449/a67bf/compliance-toolbox-blog.webp 732w","type":"image/webp","sizes":"366px"}]},"width":366,"height":333}}}}}}},"staticQueryHashes":["2757132133","3765828210","4109069157","54043548"]}