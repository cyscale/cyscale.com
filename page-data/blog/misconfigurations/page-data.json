{"componentChunkName":"component---src-template-blog-categories-template-js","path":"/blog/misconfigurations/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"authors":"Sabrina Lupșan","categories":["IAM","CSPM","Misconfigurations"],"title":"Inside the Mind of an Attacker: Compromising Azure Cloud as a Guest","seoTitle":"Inside the Mind of an Attacker: Compromising Azure Cloud as a Guest","description":"Identity and Access Management (IAM) is the first line of defense against attackers in the cloud. In the realm of cloud security, IAM represents all of the measures and good practices implemented to prevent intruders from accessing cloud resources. \n\nAn organization's cloud environment may be in danger if authentication and authorization are not handled correctly. \n\nIAM, coupled with contextual security, is the recipe for success. Understanding the level of access for each user – as well as how that access impacts other assets – is vital. It may not seem like much if a user has read permissions over a storage account, but if that storage account contains sensitive data, such as credentials for another account, then the magnitude of the impact will surpass your initial assessment. ","seoDescription":"Identity and Access Management (IAM) is the first line of defense against attackers in the cloud. In the realm of cloud security, IAM represents all of the measures and good practices implemented to prevent intruders from accessing cloud resources.   An organization's cloud environment may be in danger if authentication and authorization are not handled correctly.   IAM, coupled with contextual security, is the recipe for success. Understanding the level of access for each user – as well as how that access impacts other assets – is vital. It may not seem like much if a user has read permissions over a storage account, but if that storage account contains sensitive data, such as credentials for another account, then the magnitude of the impact will surpass your initial assessment. ","date":"2023-10-09T12:24:24.858Z","featuredpost":true,"permalink":"compromising-azure-cloud-as-guest","featuredimage":{"publicURL":"/static/871fa6f7f0a78f06eeddaabc1bc4a534/55_blog-cover.png","childImageSharp":{"gatsbyImageData":{"layout":"constrained","images":{"fallback":{"src":"/static/871fa6f7f0a78f06eeddaabc1bc4a534/d6cae/55_blog-cover.png","srcSet":"/static/871fa6f7f0a78f06eeddaabc1bc4a534/ac644/55_blog-cover.png 205w,\n/static/871fa6f7f0a78f06eeddaabc1bc4a534/89b47/55_blog-cover.png 410w,\n/static/871fa6f7f0a78f06eeddaabc1bc4a534/d6cae/55_blog-cover.png 820w","sizes":"(min-width: 820px) 820px, 100vw"},"sources":[{"srcSet":"/static/871fa6f7f0a78f06eeddaabc1bc4a534/913d0/55_blog-cover.webp 205w,\n/static/871fa6f7f0a78f06eeddaabc1bc4a534/91660/55_blog-cover.webp 410w,\n/static/871fa6f7f0a78f06eeddaabc1bc4a534/888e2/55_blog-cover.webp 820w","type":"image/webp","sizes":"(min-width: 820px) 820px, 100vw"}]},"width":820,"height":460}}}},"rawMarkdownBody":"Identity and Access Management (IAM) is the first line of defense against attackers in the cloud. In the realm of cloud security, IAM represents all of the measures and good practices implemented to prevent intruders from accessing cloud resources. \n\nAn organization's cloud environment may be in danger if authentication and authorization are not handled correctly. \n\nIAM, coupled with contextual security, is the recipe for success. Understanding the level of access for each user – as well as how that access impacts other assets – is vital. It may not seem like much if a user has read permissions over a storage account, but if that storage account contains sensitive data, such as credentials for another account, then the magnitude of the impact will surpass your initial assessment. \n\nIn this article, I will show you how human mistakes can lead to a complex attack path, where a malicious user gains access to a storage account, compromises a user, and ultimately gains access to a key vault that contains cryptographic keys and secrets used by the company’s apps. \n\nI’ve chosen a scenario where gross mistakes are made to highlight that you should not underestimate human error and the blast radius it can have.  \n\n## Case Study\n\nFintech Inc. is a financial technology startup developing a new banking application. A few customers already use the new app to access their banking data in real-time and manage their accounts. Fintech Inc. uses Microsoft Azure to develop and host their app. \n\nThe company must invite an external consultant, Anita, to collaborate in the cloud. Any user is allowed by default to invite guests in Microsoft Entra ID (former Azure Active Directory), so John, a member of the IT department, invites Anita as a guest. \n\nHowever, he makes a mistake; because he’s trying to accomplish many things in a short period of time, instead of inviting anita@fintechinc.com, he invites anita@fintech.com. The new guest user accepts the invitation and becomes a guest in Microsoft Entra ID. \n\nAs a guest, the \"fake\" Anita cannot do much. She can only access some resources that guests can access, she can manage her profile and collaborate with other users in Office 365 apps.  \n\nBut, looking closely, she discovers that she is now part of the ITAdmins group. How did that happen?! On a closer look, ITAdmins has a dynamic membership rule that states that all users whose department is \"IT\" become part of the group. The IT department wanted to make things easy for them and allow all employees in IT to join this group automatically. \n\n<img src=\"/img/55_blog-dynamic-membership-rule.png\" alt=\"Dynamic membership rule for ITAdmins group\" title=\"Dynamic membership rule for ITAdmins group\" class=\" blog-image-shadow \" style=\"width:auto;height:auto;\"/>\n\nHowever, this rule is very broad and opens up the possibility for mistakes. In this case, Anita was assigned the “IT” department, and she immediately joined the ITAdmins group, since Azure checks the attributes for a user whenever they are changed or a new user joins the cloud.  \n\nUpon further investigation, Anita discovers that the ITAdmins group has a very highly privileged role over the “rg-management\" resource group – the Contributor role. This role allows Anita to view, modify, and delete any resources within the resource group. Here comes the importance of the Least Privilege Principle – granting users too many permissions can do more harm than good. \n\n<img src=\"/img/55_blog-it-admins-contributor-rg-management.png\" alt=\"ITAdmins is Contributor over the rg-management resource group\" title=\"ITAdmins is Contributor over the rg-management resource group\" class=\" blog-image-shadow \" style=\"width:auto;height:auto;\"/>\n\nIf we take a look at this resource group, we will see it contains an interesting storage account – “backups”, a database, and a VM. \n\nWe can see this relation in the graph below. Tracing the attack path, we immediately realize how Anita is able to access the cloud assets, from the rg-management resource group through the new role she gained by joining ITAdmins, and therefore compromise them. By looking at context in the cloud, we become aware of the risk imposed by the ITAdmins groups, which has broad permissions over a multitude of important resources. \n\n<img src=\"/img/55_blog-first-graph.png\" alt=\"Graph showing the attack path\" title=\"Graph showing the attack path\" class=\" blog-image-shadow \" style=\"width:auto;height:auto;\"/>\n\nThe storage account has a \"backups\" container with a \"diskBackup.vhd\" file inside. This contains the files and data an ex-employee used before leaving the company. While in a rush, an IT admin has decided to back up the disk and look at it at some other time, later forgetting about it. \n\n<img src=\"/img/55_blog-backups-container.png\" alt=\"The contents of the 'backups' container\" title=\"The contents of the 'backups' container\" class=\" blog-image-shadow \" style=\"width:auto;height:auto;\"/>\n\nUpon restoring this file as a computer disk, Anita discovers a set of credentials. She knows she should not log in using those credentials, but she does it anyway – after all, this is not the first questionable action she’s done -, because she is curious.  \n\nThe set of credentials – an email and a password – are for a test user that was created in the past to test features of the application, the removal of which was forgotten. The user cannot log in to the portal due to a Conditional Access policy that denies access to the Microsoft Azure Management resource (Portal included).  \n\n<img src=\"/img/55_blog-access-to-portal-denied.png\" alt=\"Portal access denied for user\" title=\"Portal access denied for user\" class=\" blog-image-shadow \" style=\"width:auto;height:auto;\"/>\n\nFortunately, Anita can still log in using the credentials – through the CLI. This is a common \"bypass\" of this barrier, and, fortunately, she's good with command lines, so she can investigate what permissions her new user has. \n\nShe checks her new role assignments in the current subscription using the commandlet *Get-AzRoleAssignment* only to find, among other roles, that she’s a Key Vault Administrator. \n\n<img src=\"/img/55_blog-key-vault-administrator-role.png\" alt=\"The new user has the Key Vault Administrator role\" title=\"The new user has the Key Vault Administrator role\" class=\" blog-image-shadow \" style=\"width:auto;height:auto;\"/>\n\nWith the Key Vault Administrator role, Anita can [perform all data plane operations](https://learn.microsoft.com/en-us/azure/key-vault/general/rbac-guide?tabs=azure-cli) on the Credentials2 key vault that we can see in the image above, and all objects in it. \n\nA key vault is a huge discovery for Anita, who can investigate further. Using the commandlet *Get-AzKeyVaultSecret*, Anita can see that there are a few keys and secrets in the key vault. She can now read them, delete them or add new versions of those secrets. \n\n<img src=\"/img/55_blog-contents-of-the-key-vault.png\" alt=\"The contents of the Credentials2 Key Vault\" title=\"The contents of the Credentials2 Key Vault\" class=\" blog-image-shadow \" style=\"width:auto;height:auto;\"/>\n\n<img src=\"/img/55_blog-second-graph.png\" alt=\"The attack path for the new user\" title=\"The attack path for the new user\" class=\" blog-image-shadow \" style=\"width:auto;height:auto;\"/>\n\nAnita can now further discover other assets available on Fintech Inc.’s Azure cloud environment and possibly make use of the secrets stored in the “Credentials2” Key Vault. For example, we know that, as a best practice, [databases are encrypted](https://cyscale.com/blog/best-practices-for-securing-databases/), so a leaked decryption cryptographic key, for example, can lead to total compromise of the company’s data. \n\nTo understand everything that happened here, we need to look at all the bad practices and vulnerabilities that we have uncovered, in chronological order: \n\n1. Due to being in a rush, an employee invited the wrong person to collaborate in Azure, and no one picked up on it. \n2. The dynamic membership rule for the ITAdmins group is very broad and may accept unintended cases. \n3. The ITAdmins group has a highly privileged role over a resource group with many resources that may contain sensitive information, such as databases, and storage accounts. \n4. A disk backup that can be restored is held unencrypted in a storage account, containing a cleartext password for an active Azure account. \n5. A test user that was intended to be temporary is still active. \n6. A test user has access to a very high-value resource. \n\nAs you can see, each mistake allowed the intruder to advance more and more and compromise additional resources. \n\nThis is why contextual security and proper IAM security are necessary. Contextual security allows cloud professionals to understand what assets are impacted by others, while IAM best practices protect the cloud environment from intruders and represent the first barrier of entry.\n"}},{"node":{"frontmatter":{"authors":"Sabrina Lupșan","categories":["CSPM","IAM","Misconfigurations"],"title":"Inside the Mind of an Attacker: How Contextual Security Can Save Your Cloud","seoTitle":"Inside the Mind of an Attacker: How Contextual Security Can Save Your Cloud","description":"The future of cloud security is contextual security. To fully understand how secure an asset is, you need to understand what users have permissions to interact with it and what resources it communicates with. It might seem that a VM is completely secure because you put it behind a firewall, but if a compromised user can access it, it’s game over. \n\nThe perfect recipe for contextual security is a Cloud Security Knowledge Graph. Based on it, we can represent in a visual and interactive way how cloud resources interact, what kind of relations they have, what users have permissions to read/write on them, and so on.  \n\nTo illustrate my point, I will show you some scenarios where the difference between a secure cloud and a breach is made by fixing misconfigurations and limiting users' access. These measures are easier to identify using a graph, because it helps you understand the risks your environment is exposed to.  ","seoDescription":"The future of cloud security is contextual security. To fully understand how secure an asset is, you need to understand what users have permissions to interact with it and what resources it communicates with. It might seem that a VM is completely secure because you put it behind a firewall, but if a compromised user can access it, it’s game over.   The perfect recipe for contextual security is a Cloud Security Knowledge Graph. Based on it, we can represent in a visual and interactive way how cloud resources interact, what kind of relations they have, what users have permissions to read/write on them, and so on.    To illustrate my point, I will show you some scenarios where the difference between a secure cloud and a breach is made by fixing misconfigurations and limiting users' access. These measures are easier to identify using a graph, because it helps you understand the risks your environment is exposed to.  ","date":"2023-09-19T09:01:02.199Z","featuredpost":true,"permalink":"contextual-security-google-cloud","featuredimage":{"publicURL":"/static/7fbef8aa4e6e383ec434207181f0d892/blog_54-cover.png","childImageSharp":{"gatsbyImageData":{"layout":"constrained","images":{"fallback":{"src":"/static/7fbef8aa4e6e383ec434207181f0d892/2c0f5/blog_54-cover.jpg","srcSet":"/static/7fbef8aa4e6e383ec434207181f0d892/41be8/blog_54-cover.jpg 205w,\n/static/7fbef8aa4e6e383ec434207181f0d892/c78f7/blog_54-cover.jpg 410w,\n/static/7fbef8aa4e6e383ec434207181f0d892/2c0f5/blog_54-cover.jpg 820w","sizes":"(min-width: 820px) 820px, 100vw"},"sources":[{"srcSet":"/static/7fbef8aa4e6e383ec434207181f0d892/913d0/blog_54-cover.webp 205w,\n/static/7fbef8aa4e6e383ec434207181f0d892/91660/blog_54-cover.webp 410w,\n/static/7fbef8aa4e6e383ec434207181f0d892/888e2/blog_54-cover.webp 820w","type":"image/webp","sizes":"(min-width: 820px) 820px, 100vw"}]},"width":820,"height":460}}}},"rawMarkdownBody":"When public cloud providers such as Google Cloud and AWS first appeared, their benefits were hard to ignore. And although companies were reluctant to put their infrastructure and applications in the hands of a different company, cloud solutions have grown in popularity.  \n\nWith more and more complex setups, it is hard for an organization to understand and keep track of the implication of every resource they have in the cloud, the risk it poses to the entire infrastructure or how many other assets it impacts. \n\nI believe the future of cloud security is contextual security. To fully understand how secure an asset is, you need to understand what users have permissions to interact with it and what resources it communicates with. It might seem that a VM is completely secure because you put it behind a firewall, but if a compromised user can access it, it’s game over. \n\nThe perfect recipe for contextual security is a [Cloud Security Knowledge Graph](https://cyscale.com/blog/security-knowledge-graph-integrations/). Based on it, we can represent in a visual and interactive way how cloud resources interact, what kind of relations they have, what users have permissions to read/write on them, and so on.  \n\nTo illustrate my point, I will show you some scenarios where the difference between a secure cloud and a breach is made by fixing misconfigurations and limiting users' access. These measures are easier to identify using a graph, because it helps you understand the risks your environment is exposed to.  \n\n## Case Study \n\nLet’s assume we use BigQuery in Google Cloud for a health analytics application. We have a table that contains some datasets of patients from a hospital, including PII data. These datasets are very valuable and cannot fall in the hands of outsiders. \n\nNow, we want to make sure that the data is securely stored. We look at the BigQuery table’s graph to see if the table poses any risk and, low and behold, it does! \n\n<img src=\"/img/blog_54-graf0.png\" alt=\"Contextual security through the graph\" title=\"Contextual security through the graph\" class=\" blog-image-shadow \" style=\"width:auto;height:auto;\"/>\n\nWe can observe, in the image above, that no less than 7 Cloud Functions and 4 VMs can access it across 9 Service Accounts that have permissions on the BigQueryTable, as well as 7 IAM Users. Does this alarm you? It should. \n\nBut just because a VM, or a function, can have access to the table does not mean anything, right? Wrong! I’m going to show you exactly how bad things can get in this situation. I’m going to put my hacker shoes on and show you potential scenarios that might lead to data being stolen. \n\n### Scenario 1: compromised VM \n\nOut of the 4 VMs that we see in the image, one is an Internet-facing one. The compute instance “dev-1” hosts an application that has the Log4J vulnerability, a classic. A hacker leverages the vulnerability and gains access to the instance. If they take over an IAMUser with the Compute Instance Admin role, or obtain SSH access to the VM, the disaster begins. **Because a Service Account is associated to the VM, the attacker has that account’s permissions.** In our scenario, the application running on the Instance needs to process data in the dataset, so the associated Service Account was given the roles/bigquery.dataEditor permission. \n\nMoreover, in a VM, credentials used to manually authenticate are stored on the Compute Instance after the first time a user authenticates as a Service Account, in */.config/gcloud/credentials.db*, as you can see in the image below. \n\n<img src=\"/img/blog_54-ss1.png\" alt=\"Credentials stored in Google Cloud VM\" title=\"Credentials stored in Google Cloud VM\" class=\" blog-image-shadow \" style=\"width:auto;height:auto;\"/>\n\nThis is a standard location and it stores the last private key that was used to authenticate as a Service Account.  You can also find access tokens in the same folder, in *access_tokens.db*. Moreover, you can see any other private keys used previously (which may still be valid, if they were not deleted in the Google Cloud Console) in */.config/gcloud/legacy_credentials/<serviceAccountEmail>/adc.json*. \n\nLooking at the file credentials.db, we notice that the information is not stored in the standard format for a private key for a Service Account. With a few adjustments, we obtain a valid private key that we then use to authenticate. To authenticate as a Service Account with a private key, simply use the following command:  \n\n```\ngcloud auth activate-service-account <serviceAccountEmail> --key-file=<keyFile>\n```\n\n<img src=\"/img/blog_54-ss2.png\" alt=\"Authenticating using the secret key\" title=\"Authenticating using the secret key\" class=\" blog-image-shadow \" style=\"width:auto;height:auto;\"/>\n\nHowever, what happens when no one has authenticated as a Service Account on the VM? There is no *credentials.db* file (actually, there is no *.config* folder).  \n\nDevelopers tend to find ways to do things faster, and they get comfortable. It is not uncommon to find secrets in environment variables or plain-text files. If a developer were to store a secret key file on the Compute Instance, we could abuse it. Simply log in using the private RSA key file: \n\n<img src=\"/img/blog_54-ss3.png\" alt=\"Private key on the VM\" title=\"Private key on the VM\" class=\" blog-image-shadow \" style=\"width:auto;height:auto;\"/>\n\n<img src=\"/img/blog_54-ss4.png\" alt=\"Authenticating as Service Account\" title=\"Authenticating as Service Account\" class=\" blog-image-shadow \" style=\"width:auto;height:auto;\"/>\n\nChecking the current permissions, and… bingo! roles/bigquery.dataEditor is one of the available roles. \n\n<img src=\"/img/blog_54-ss5.png\" alt=\"Service Account with roles/bigquery.dataEditor\" title=\"Service Account with roles/bigquery.dataEditor\" class=\" blog-image-shadow \" style=\"width:auto;height:auto;\"/>\n\nIf we expand the graph’s nodes that we used in this chain of attacks, you can clearly see the attack path: \n\n<img src=\"/img/blog_54-primul-graf.png\" alt=\"Attack path through the VM\" title=\"Attack path through the VM\" class=\" blog-image-shadow \" style=\"width:auto;height:auto;\"/>\n\nWith the bigquery.dataEditor role, the attacker can now: \n\n* view data and metadata, \n* modify data and metadata, \n* delete tables. \n\n This breach could be avoided by: \n\n* ensuring the VM does not have vulnerabilities, and patching the Log4J one, \n* isolating the Compute Instance from the Internet by closing the exposed port, if possible, \n* restricting the Service Account’s permissions as much as possible,\n* making sure secrets are cleared from the VM files.   \n\n<img src=\"/img/blog_54-ss6.png\" alt=\"Access to the BigQueryTable datasets\" title=\"Access to the BigQueryTable datasets\" class=\" blog-image-shadow \" style=\"width:auto;height:auto;\"/>\n\n### Scenario 2: compromised user \n\nExpanding the Users node, we see that there are three users that have access to the BigQueryTable.  \n\n<img src=\"/img/blog_54-ultimul-graf.png\" alt=\"Attack path through user compromise\" title=\"Attack path through user compromise\" class=\" blog-image-shadow \" style=\"width:auto;height:auto;\"/>\n\nIf a hacker were to take over any of those accounts, for example, by stealing credentials, our customer’s data would be at risk. If one of the three users that have access to the table does not have MFA enforced, then the attacker can compromise the account.  \n\nEnabling MFA would prevent this. \n\nBesides this, a common mistake is focusing on protecting your environment from the outside, and forgetting about your own users. If one of the employees in the organization has too many permissions, they may produce damage without intention. By exploring the account and looking at resources, a user can accidentally modify or delete an asset. \n\nThis is why the Least Privilege Principle is so important – always limit the users’ access as much as possible and only assign the necessary permissions. \n\nWe believe that context is the future of cloud security. We’ve seen how the most simple relations between assets can be leveraged by attackers to take over cloud assets; and if your customers’ data is stored in those assets, the greater the prize is for hackers – and they will do anything to get it."}},{"node":{"frontmatter":{"authors":"Sabrina Lupșan","categories":["CNAPP","Misconfigurations"],"title":"Understanding Container Images: Common Vulnerabilities and Best Practices","seoTitle":"Understanding Container Images: Common Vulnerabilities and Best Practices","description":"Container images are files that contain everything needed to run software on containers: code, system tools, libraries, runtime tools. Containers are a lightweight solution that allows applications to run independently of operating systems. Containers encapsulate applications and their dependencies and provide numerous benefits, such as portability, consistency, scalability and isolation. Best practices include scanning your container images for vulnerabilities, hardening your container images, performing regular updates, using trusted base images and ensuring visibility in your cloud environment.","seoDescription":"Container images are files that contain everything needed to run software on containers: code, system tools, libraries, runtime tools. Containers are a lightweight solution that allows applications to run independently of operating systems. Containers encapsulate applications and their dependencies and provide numerous benefits, such as portability, consistency, scalability and isolation. Best practices include scanning your container images for vulnerabilities, hardening your container images, performing regular updates, using trusted base images and ensuring visibility in your cloud environment.","date":"2023-06-08T09:34:09.972Z","featuredpost":true,"permalink":"container-images-best-practices","featuredimage":{"publicURL":"/static/698fbf2c6ec9f5f50e15ea3be2c7f42f/43_blog-container-images.webp","childImageSharp":{"gatsbyImageData":{"layout":"constrained","images":{"fallback":{"src":"/static/698fbf2c6ec9f5f50e15ea3be2c7f42f/888e2/43_blog-container-images.webp","srcSet":"/static/698fbf2c6ec9f5f50e15ea3be2c7f42f/913d0/43_blog-container-images.webp 205w,\n/static/698fbf2c6ec9f5f50e15ea3be2c7f42f/91660/43_blog-container-images.webp 410w,\n/static/698fbf2c6ec9f5f50e15ea3be2c7f42f/888e2/43_blog-container-images.webp 820w","sizes":"(min-width: 820px) 820px, 100vw"},"sources":[]},"width":820,"height":460}}}},"rawMarkdownBody":"Container images are files that contain everything needed to run software on containers: code, system tools, libraries, runtime tools. Containers are a lightweight solution that allows applications to run independently of operating systems. Containers encapsulate applications and their dependencies and provide numerous benefits, such as: \n\n* **Portability.** Because containers encapsulate everything needed to run applications, they can be moved between environments without causing the need for additional libraries or other tools. \n* **Consistency.** By including all the needed dependencies in a container image, an app will work the same across different machines; no more \"it works on my machine\". \n* **Scalability.** By leveraging container orchestration platforms like Kubernetes, you can dynamically scale containers based on demand, allowing your application to handle varying workloads effectively. \n* **Isolation.** Since the app has its own environment, it is isolated from other resources. This adds a layer of security.  \n\n## Container images vulnerabilities \n\nContainers have many advantages. However, they can also introduce unique vulnerabilities in your cloud infrastructure. Let’s look at some of them to fully understand the impact of using containerization. \n\n### 1. Vulnerable libraries. \n\nContainer images often contain third-party libraries and dependencies. It is not uncommon for libraries to have known vulnerabilities.  \n\nRegularly scanning and updating these dependencies is critical to reducing the attack surface. \n\n### 2. Insecure configurations \n\nMisconfigured container images can lead to the compromise of confidentiality of data, unauthorized access, and others. Examples of insecure settings include: \n\n* Weak access control, \n* The usage of environment variables to pass sensitive information (such as passwords or API keys), \n* Poor network settings, such as unnecessary open ports. \n\n### 3. Outdated software \n\nContainer images may contain outdated frameworks, operating systems, and libraries. If they are not regularly updated, they may have vulnerabilities. Run your applications on updated OSs and use newer versions of frameworks and libraries to ensure that your infrastructure is patched! \n\n## Common best practices \n\nWe’ve comprised a list of best practices that you should follow when using container images or when creating them: \n\n1. ### Ensure visibility in your cloud environment \n\nContainers are widely used in cloud environments due to their scalability and efficiency. To understand how container images affect your security posture, you need to gain visibility in your cloud infrastructure and grasp the context of every image in use by: \n\n* mapping cloud resources to the images they’re using, \n* identifying which of those assets have access to critical data, \n* assessing the container image configurations. \n\n2. ### Use trusted base images \n\nOnly utilize trusted images from known, reputable sources to ensure that the container images you're using are patched and have undergone security reviews. These images are not guaranteed to be completely secure, but it's a good starting point. \n\n3. ### Perform regular updates \n\nAs mentioned in the previous chapter, patch container images to avoid the use of outdated or vulnerable frameworks, libraries or operating systems.  \n\n4. ### Scan your container images for vulnerabilities \n\nScan images regularly for known vulnerabilities and make sure to address any findings. Reduce the attack surface and obtain insights into vulnerabilities present in the software components of a container image. \n\n5. ### Harden your container image \n\nReduce the attack surface of your containerized applications: \n\n1. Implement [the least privilege principle](https://cyscale.com/blog/check-for-least-privilege): do not run processes as root to prevent the possibility of privilege escalation inside your container. \n2. Disable unnecessary services and functionalities: minimize potential entry points for attackers by disabling tools that are not required. \n3. Restrict ports accessibility: do not leave networks ports open unnecessarily. \n\n## Container images – where are they present? \n\nContainer images can be used in various cloud-based services across public cloud platforms like AWS, Google Cloud, and Microsoft Azure.  \n\nThese services leverage container images to enable the seamless deployment, scaling, and management of containerized applications. \n\nExamples of services that run container images are: \n\n* ECS (Amazon Elastic Container Service), EKS (Amazon Kubernetes Service) \n* AKS (Azure Kubernetes Service), \n* GKE (Google Kubernetes Engine), and others. \n\n\n\nContainers form the foundation of modern cloud-based application deployment. Therefore, it is crucial to understand their purpose, potential vulnerabilities, and best practices for securing them. By implementing the recommended best practices and staying informed about emerging threats, your organization can secure container environments and ensure the safety of cloud-based applications. \n\nIn the dynamic landscape of cloud security, continuous learning and adaptation are paramount. As containerization continues to revolutionize the cloud industry, maintaining a strong focus on container image security will help organizations stay ahead of potential threats and safeguard their valuable assets.\n"}},{"node":{"frontmatter":{"authors":"Sabrina Lupșan","categories":["Misconfigurations"],"title":"S3 Bucket Misconfiguration: Common Oversights and Their Fixes","seoTitle":"S3 Bucket Misconfiguration: Common Oversights and Their Fixes","description":"An Amazon S3 bucket is a storage cloud asset that acts as a container for data stored in the public cloud. Buckets are object storage services and are similar to folders; this type of storage is flexible and scalable and is ideal for large files and unstructured data. To secure a bucket, restrict public access to it, perform at rest and in transit encryption, log user actions, and perform regular backups.","seoDescription":"An Amazon S3 bucket is a storage cloud asset that acts as a container for data stored in the public cloud. Buckets are object storage services and are similar to folders; this type of storage is flexible and scalable and is ideal for large files and unstructured data. To secure a bucket, restrict public access to it, perform at rest and in transit encryption, log user actions, and perform regular backups.","date":"2022-09-16T08:07:20.546Z","featuredpost":true,"permalink":"s3-bucket-security","featuredimage":{"publicURL":"/static/de7396bc58775c924174c3c9f2467bbe/23_blog-cover-photo.webp","childImageSharp":{"gatsbyImageData":{"layout":"constrained","images":{"fallback":{"src":"/static/de7396bc58775c924174c3c9f2467bbe/888e2/23_blog-cover-photo.webp","srcSet":"/static/de7396bc58775c924174c3c9f2467bbe/913d0/23_blog-cover-photo.webp 205w,\n/static/de7396bc58775c924174c3c9f2467bbe/91660/23_blog-cover-photo.webp 410w,\n/static/de7396bc58775c924174c3c9f2467bbe/888e2/23_blog-cover-photo.webp 820w","sizes":"(min-width: 820px) 820px, 100vw"},"sources":[]},"width":820,"height":460}}}},"rawMarkdownBody":"<!--StartFragment-->  \n\nIn 2017, 4 million records with customer information, login credentials, and source code were made publicly available due to 2 unsecured AWS S3 storage buckets owned by Time Warner Cable. \n\nThe consequences of this attack were disastrous, and this event showed the entire cloud industry how important security is. \n\n\n\nIn this article, we will learn more about Amazon S3 buckets, misconfigurations and vulnerabilities, and how to secure them.\n\n## What is an Amazon S3 bucket?  \n\nAn Amazon S3 bucket is a storage cloud asset that acts as a container for data stored in the public cloud. Buckets are object storage services and are similar to folders; this type of storage is flexible and scalable and is ideal for large files and unstructured data. \n\n## Common S3 Bucket Misconfigurations \n\n### 1. Public access to a bucket is allowed. \n\nSometimes, Amazon S3 buckets are required to be publicly accessible. For example, this use case occurs when the owner intends to make data accessible to the internet.  \n\nHowever, breaches occur when a bucket that has sensitive information such [as PII (Personal Identifiable Information)](https://cyscale.com/blog/protecting-pii-in-the-cloud/) allows: \n\n* Public “READ” access, \n* Public “WRITE” access.  \n\nYou can grant and deny access to a bucket using **access lists** and **bucket policies**.  \n\nAn access control list (ACL) is a set of rules that limit access to buckets through permissions. It defines an account's access level over a bucket (for example, READ or WRITE).  \n\nA bucket policy also contains rules based on which access is allowed or denied, but it is a more modern solution because it can enable more complex filtering. It is a JSON-based access policy language. \n\nAmazon recommends that you no longer use ACLs beside special cases, in which you need to filter access to objects individually.  \n\n### 2. No at rest encryption is performed. \n\n[Data at rest](https://cyscale.com/blog/protecting-data-at-rest/) should always be encrypted to ensure confidentiality and improve your cloud data security.  \n\nPerforming encryption on the objects inside a bucket ensures that, even if a malicious entity gains access to your data, they cannot read it.  \n\nAWS provides multiple encryption options to protect data at rest. For example, you can enable default encryption and set it, so it automatically encrypts any new objects added to the bucket.  \n\nEncryption should be done using industry-recommended algorithms and strong cryptographic keys. A strong encryption algorithm is AES-256 (Advanced Encryption Standard with a key of 256 bits). \n\n### 3. In transit encryption is not enabled. \n\nBesides the data that is already stored, you should also encrypt the data that travels to and from the S3 bucket.  \n\nThis step prevents eavesdropping attacks. It is not enough to store your data encrypted. Your efforts are wasted if it travels in plain text and attackers can read it. \n\nData in motion can be encrypted using SSL/TLS. TLS (Transport Layer Security) and SSL (Secure Sockets Layer) are transport layer protocols that protect the data in transit. TLS is a newer and improved version of SSL. \n\nAnother solution for in motion encryption is preparing the data that is to be transported by encrypting it on the client-side. \n\n### 4. Logging is disabled. \n\nLogging an S3 bucket is an essential step in securing your data. With logging, you can record actions taken by users, keep log files for compliance purposes and understand what roles have permission to access data inside a bucket. \n\nThere are two solutions for AWS bucket logging: \n\n* Server access logging, and \n* AWS CloudTrail. \n\nWith server access logging, you obtain detailed records regarding requests that are made to a bucket. \n\nAWS CloudTrail is a comprehensive service that tracks user activity and API calls. It can be used to keep a record of who sends requests to a bucket.  \n\nIt is important to keep in mind that AWS CloudTrail does not log failed authentication attempts through incorrect credentials. However, it does track requests made by anonymous or unauthorized users. \n\n### 5. No regular backups are performed \n\nAttackers may not only try to steal your sensitive data, but they can also delete it. Therefore, ensuring regular and consistent backups is essential to configuring your buckets and providing availability. \n\nUsing AWS Backup, you can perform S3 bucket backups. Amazon supports the following types of backups: \n\n* **Continuous backups**, which allow data restoration from any moment in the last 35 days, \n* **Periodic backups**, which can be performed every 1 hour, 12 hours, or less often. \n\nAn important feature of AWS Backup is that [tags](https://cyscale.com/blog/data-classification/), access control lists, and other metadata are also saved along with your data. \n\nAn additional layer of security can be added by using the MFA delete feature in AWS. This option requires a successful MFA before allowing a user to delete an object or bucket. \n\nMoreover, you can keep multiple versions of an object inside a bucket. This process is called versioning and can be used to recover objects from accidental deletion. \n\n## Do you have a complete cloud security program? \n\nIn this article, we’ve discussed many possible misconfigurations, along with best practices. However, in order to fully understand your public cloud infrastructure and find vulnerabilities, you need to have good visibility over your cloud environment.  \n\nUsing a new feature in Cyscale, the bucket graph, you can put in context all of your knowledge and grasp a better understanding of your infrastructure. \n\nBelow, you can see an example of a bucket graph. \n\n![Bucket Graph in Cyscale](/img/23_blog-graph-bucket.webp#shadow \"Bucket Graph in Cyscale\")\n\nAlthough the bucket (shown on the right) has only two IAM policies attached, we can see that these have a significant impact on the infrastructure: the AmazonS3FullAccess policy gives full access rights to a specific user and to a VM that can assume an associated IAMRole.  \n\nIn addition, there's a lambda function that has a role which gives it permissions to perform actions on the bucket \n\nWithout context, we would not be able to understand a policy's impact and the associated risk. \n\nMoreover, the icon on the right shows us that the bucket violates three policies. Cyscale users can click on the icon and obtain more details regarding this alert. \n\nThis feature helps you quickly understand and fix any misconfigurations and vulnerabilities introduced in the cloud environment due to the bucket’s settings. \n\n  \n\nBesides the graph, you can also use controls to check your cloud configurations easily. Find any gaps in your buckets' configurations using Cyscale controls! Here are a few examples that can help you instantly check the most common misconfigurations regarding S3 buckets: \n\n* *Ensure S3 bucket ACL grants permissions only to specific AWS accounts* \n* *Ensure all S3 buckets employ encryption-at-rest* \n* *Ensure a log metric filter and alarm exist for S3 bucket policy changes* \n* *Ensure that there are no publicly accessible objects in storage buckets* \n\n \n\n<!--EndFragment-->\n"}},{"node":{"frontmatter":{"authors":"Sabrina Lupșan","categories":["Misconfigurations"],"title":"Common Cloud Misconfigurations and How to Avoid Them","seoTitle":"Common Cloud Misconfigurations and How to Avoid Them","description":"Cloud misconfigurations are the number one reason for security breaches. The first step towards securing your environment and improving your cloud security posture is acknowledging and knowing how to avoid mistakes.","seoDescription":"5 of the most common cloud misconfigurations are: poor storage access configuration, broken access control, unrestricted inbound and outbound traffic, missing encryption, disabled or unconfigured logging and monitoring. Learn how to avoid them and improve your cloud security posture with Cyscale.","date":"2022-04-20T07:01:46.443Z","featuredpost":true,"permalink":"common-cloud-misconfigurations-how-to-avoid-them","featuredimage":{"publicURL":"/static/9af1415197c714721ab329e1204d8353/common-cloud-misconfigurations.webp","childImageSharp":{"gatsbyImageData":{"layout":"constrained","images":{"fallback":{"src":"/static/9af1415197c714721ab329e1204d8353/888e2/common-cloud-misconfigurations.webp","srcSet":"/static/9af1415197c714721ab329e1204d8353/913d0/common-cloud-misconfigurations.webp 205w,\n/static/9af1415197c714721ab329e1204d8353/91660/common-cloud-misconfigurations.webp 410w,\n/static/9af1415197c714721ab329e1204d8353/888e2/common-cloud-misconfigurations.webp 820w","sizes":"(min-width: 820px) 820px, 100vw"},"sources":[]},"width":820,"height":460}}}},"rawMarkdownBody":"Cloud misconfigurations are the number one reason for security breaches.  \n\nThe first step towards securing your environment and improving your cloud security posture is acknowledging and knowing how to avoid mistakes. \n\nAccording to [Gartner](https://www.gartner.com/smarterwithgartner/is-the-cloud-secure), 99% of cloud security failures will occur due to human error through 2025. \n\n5 of the most common [cloud misconfigurations](https://cyscale.com/use-cases/cloud-misconfigurations/) are: \n\n1. Poor storage access configuration \n2. Broken access control \n3. Unrestricted inbound and outbound traffic \n4. Missing encryption \n5. Disabled or unconfigured logging and monitoring \n\nThis article will explain these misconfigurations and help you work them out.  \n\nWe will also give you some examples of the controls Cyscale implements to ensure foolproof configurations for your company’s cloud. \n\n<div id=\"storage-access\">\n\n## **1. Poor storage access configuration**\n\nStorage access misconfigurations usually make cloud assets open to the public view. \n\nWe can take as an example Amazon S3 buckets. A significant security vulnerability is making an S3 bucket that contains sensitive data public. This means that everyone on the internet can access your data. \n\nThere are two ways in which public access over a bucket can lead to cybersecurity incidents: \n\n* Public “READ” access \n* Public “WRITE” access \n\nPublic “READ” access over a company’s buckets creates the risk of a data breach.  \n\n“WRITE” access over a bucket is arguably worse – this means that entities from the internet can infiltrate malware such as \n\n* backdoors,\n* ransomware,\n\nor even crowd your bucket with their data in order to obtain free storage. \n\n### **Solution**\n\nBlock public access using access lists and policies.  \n\nAn access control list (ACL) is a set of rules that limit access to buckets through permissions. It defines the access level an account has over a bucket (for example, READ or WRITE). \n\nLet’s look at some examples of controls offered by Cyscale that check if you have storage access misconfigurations: \n\n* *Ensure that S3 Buckets are configured with 'Block public access (bucket settings)'* for AWS Cloud \n* *Ensure network access rule for storage bucket is not set to publicly accessible* for Alibaba Cloud\n\n</div>\n\n## **2. Broken access control**\n\nWhen talking about access control misconfigurations, we refer to overly permissive rights. \n\nThe Principle of Least Privilege states that a user should not be given more permissions than they need to perform their job. \n\nBadly implemented access control can lead to cybersecurity incidents because: \n\n* an employee may accidentally misconfigure other assets because they are given the right to, even though they shouldn’t have it, \n* an attacker that gets ahold of an employee’s account may leverage the broad range of permissions they have to further penetrate the infrastructure or gain access to secrets. \n\nAdministrator or root privileges should only be given to those users who absolutely require them. \n\n### **Solution**\n\nRestrict access to the lowest privilege every user needs and eliminate all administrator/root accounts that are not strictly necessary. \n\nTwo examples of the many controls Cyscale has that regulate this issue are: \n\n* *Ensure that ServiceAccount has no Admin privileges* for Google Cloud Platform \n* *Eliminate use of the \"root\" user for administrative and daily tasks* for AWS Cloud \n\nAnother best practice to mention is having groups with very well-defined rules and privileges. \n\nIn this way, you can assign a user to the correct group and minimize the risk of making a mistake when adding permissions for a new user or when trying to manage multiple users. \n\nThe implementation of this feature is checked by Cyscale using, for example, the following controls: \n\n* *Ensure IAM Users receive permissions only through Groups* for AWS Cloud \n* *Ensure RAM policies are attached only to groups or roles* for Alibaba Cloud \n\n## **3. Unrestricted inbound and outbound traffic**\n\nWhen we talk about cloud networking, we have two types of traffic: \n\n1. Inbound\n2. Outbound\n\nEach one involves a different type of risk. \n\nWith inbound traffic, unnecessarily open ports may be a door inside for an attacker. \n\nOn the other hand, outbound unrestricted traffic allows a perpetrator to: \n\n* exfiltrate data \n* pivot to other assets in your cloud environment (otherwise known as lateral movement) \n* scan your infrastructure and gather data about your company \n\n### **Solution**\n\nMake sure to close or restrict ports that are not necessary. Use access lists to restrict ranges of IPs and ports. \n\nLet’s look at two of the hundreds of controls implemented in Cyscale that restrict unnecessary traffic from your cloud.  \n\n* *Ensure firewall rule does not allow all traffic for MySQL (port 3306)* for Google Cloud Platform \n* *Ensure firewall rule does not allow all traffic on all ports* for Google Cloud Platform \n\n## **4. Missing encryption**\n\nWhen we’re considering encryption in the cloud, there are numerous cloud assets we need to have in mind. For example: \n\n* S3 buckets, \n* virtual machine disks, \n* databases and others. \n\nEncryption assures confidentiality. If your sensitive data is accidentally exposed or someone gains access to it, strong encryption can still protect it. \n\nTherefore, it is important to make sure your data is encrypted in the cloud. \n\n### **Solution**\n\nImplement strong encryption and use industry-recommended cryptographic algorithms with strong keys.  \n\nSome examples of controls implemented in Cyscale that check if encryption is correctly assured in your cloud environment are: \n\n* *Ensure all S3 buckets employ encryption-at-rest* for AWS Cloud \n* *Ensure that 'Data encryption' is set to 'On' on a SQL Database* for Microsoft Azure \n* *Ensure VM disks for critical VMs are encrypted with Customer-Supplied Encryption Keys (CSEK)* for Google Cloud Platform \n\n## **5. Disabled or unconfigured logging and monitoring**\n\nIt is extremely important to log actions taken in your cloud environment. This can help you: \n\n* identify mistakes and other misconfigurations \n* provide accountability for employees’ actions \n* notice suspicious behavior \n\nMoreover, a key feature would be having targeted alerts alongside logging. This can help you cut through the noise of logs. \n\nEffectiveness can be increased in this way because you do not have to skim through all of the generated logs, since targeted alerts point out specific problems.\n\n### **Solution**\n\nImplement logging and monitoring with automated, targeted alerts. \n\nSome of the many controls provided by Cyscale that help you configure logging correctly are: \n\n* *Ensure that activity log alert exists for the Delete Network Security Group Rule* for Microsoft Azure\n* *Ensure S3 bucket access logging is enabled on the CloudTrail S3 bucket* for AWS Cloud\n\n<br/>\n\nNow that we’ve looked at the most common cloud misconfigurations and showed you how to identify and fix them, make sure to check out [Cyscale](https://cyscale.com/) to solidify your cloud security posture.  \n\nYou will find: \n\n* controls that check for the misconfigurations presented in this article and more,\n* an explanation of what those misconfigurations are,\n* instructions on how to fix them.\n"}}]}},"pageContext":{"limit":9,"skip":0,"numPages":1,"currentPage":1,"category":"Misconfigurations","seoTitle":"Cloud Misconfigurations - Expert Insights and Tips | Cyscale Blog","seoDescription":"Navigate the complexities of cloud misconfigurations. Get insights on prevention, detection, and solutions for securing your cloud infrastructure.","heading":"Cloud Misconfigurations - Expert Insights and Tips","categoriesList":["News","Cloud Native Security","IAM","Cloud Security","CNAPP","Compliance","Product","CSPM","Misconfigurations","Encryption"],"categorySlug":"misconfigurations"}},"staticQueryHashes":["1117504136","2024892666","220583031","273821743","3722074465","4068795820","4109069157","81406208","981947644"],"slicesMap":{}}