{"componentChunkName":"component---src-template-blog-categories-template-js","path":"/blog/cloud-native-security/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"authors":"Sabrina Lupșan","categories":["Cloud Native Security"],"title":"Cloud-Native Security: A Comprehensive Guide to Securing Your Technology Stack ","seoTitle":"Cloud-Native Security: A Comprehensive Guide to Securing Your Technology Stack ","description":"An article about cloud native security. We understand the advantages of cloud-native applications based on on-premises applications, as well as look at how to secure your cloud native application. The 4 layers that should be considered when securing cloud-native apps are at code, container, cluster and cloud levels.","seoDescription":"A comprehensive guide to securing your technology stack from the perspective of cloud-native security. We understand the advantages of cloud-native applications based on on-premises applications, as well as look at how to secure your cloud native application. The 4 layers that should be considered when securing cloud-native apps are at code, container, cluster and cloud levels. You can identify misconfigurations in the cloud and remediate them effectively using Cyscale.","date":"2022-06-24T10:33:17.619Z","featuredpost":true,"permalink":"cloud-native-security-guide","featuredimage":{"publicURL":"/static/341ce0dd924ffe663b1e53e4b9941d22/cloud-native.webp","childImageSharp":{"gatsbyImageData":{"layout":"constrained","images":{"fallback":{"src":"/static/341ce0dd924ffe663b1e53e4b9941d22/888e2/cloud-native.webp","srcSet":"/static/341ce0dd924ffe663b1e53e4b9941d22/913d0/cloud-native.webp 205w,\n/static/341ce0dd924ffe663b1e53e4b9941d22/91660/cloud-native.webp 410w,\n/static/341ce0dd924ffe663b1e53e4b9941d22/888e2/cloud-native.webp 820w","sizes":"(min-width: 820px) 820px, 100vw"},"sources":[]},"width":820,"height":460}}}},"rawMarkdownBody":"<!--StartFragment-->\n\n<div id=\"what-does-cloud-native-mean\">\n\n## What does cloud-native mean?\n\n</div>\n\nDepending on the method they were built upon, we have three categories of applications that make use of cloud technology: \n\n* Cloud-native, \n* Cloud-based, \n* Cloud-enabled. \n\nA **cloud-native application** is an integral part of a [cloud-native infrastructure](https://cyscale.com/blog/cloud-native-infrastructure/). It is developed and deployed in the cloud in its entirety.  \n\nThis type of application is containerized, for example in Docker or Kubernetes, to ensure isolated, dependency-free environments, and most of the time uses microservices to divide tasks and provide granularity.  \n\n**Cloud-based applications** are built and run outside the cloud but have certain features integrated into the cloud. \n\nA **cloud-enabled or non-native application** is originally meant for an on-premises environment. It is built outside the cloud and later transferred into one, in order to enjoy some of its benefits. \n\n<div id=\"advantages\">\n\n## Advantages of going cloud-native\n\n</div>\n\nTo better understand the differences between cloud-native and on-premises apps that do not use cloud, we will look at the former’s advantages and disadvantages over the latter’s.\n\n### Speed \n\nNative applications are easier and faster to build and deploy than on-premises ones because no sophisticated software or hardware requirements need to be fulfilled. Moreover, updates are also implemented faster in a cloud-native architecture and require no downtime.\n\n### Cost \n\nThe cost of using cloud-native technology depends on the application but is generally lower since it does not require the purchase of expensive hardware. For example, instead of buying a computer, you use virtual machines.\n\nTypically, cloud-native applications only require software licenses or subscriptions. \n\n### Scalability \n\nSince cloud-native environments do not require hardware upgrades, they are scalable and adaptable to business requirements. \n\nAccording to [CNCF](https://github.com/cncf/toc/blob/main/DEFINITION.md) (The Cloud Native Computing Foundation), an open source project, “cloud native technologies empower organizations to build and run scalable applications”. \n\n### Resiliency \n\nThe cloud is known for its resiliency against natural disasters, power outages and other incidents that may disrupt a cloud-enabled application. Native cloud workloads are therefore more resilient. \n\n### A serverless model \n\nCloud-native applications may work on a serverless model by leaving the provisioning and maintaining tasks to the cloud provider. This model simplifies the deployment steps and eases the developer's work, increasing productivity. \n\nMoreover, using this model, cloud-native applications can be launched only when needed, the code in serverless functions responding to triggers and consuming resources when necessary. An advantage is that costs are reduced for applications. \n\n<div id=\"guide-to-secure-cloud\">\n\n## How to secure your cloud-native application\n\n</div>\n\nAccording to [Kubernetes](https://kubernetes.io/docs/concepts/security/overview/), cloud-native security can be approached in 4 layers, called the 4 C’s: \n\n1. Code, \n2. Container, \n3. Cluster, \n4. Cloud. \n\n### Code \n\nThe inner layer of security refers to the code; it is the part the application’s developer has the most control over, yet it can be one of a hacker's most appealing attack surfaces. \n\nApplication code security is usually an underrated cybersecurity mechanism and neglecting it can lead to disastrous outcomes. Here are a few security practices for securing code: \n\n* **Sanitize input.** This can go a long way and prevent security vulnerabilities such as SQL injection, cross-site scripting, and others. \n* **Use encryption.** Data at rest and data in transit should always be encrypted. Make sure you’re sending application data encrypted through TLS. \n* **Ensure modern cryptography.** Even if you’re using encryption and hashing, make sure that: \n\n  * You’re not using deprecated algorithms, such as DES for encryption and MD5 for hashing, Instead, use AES and SHA-256 or newer, which are the current standards. \n  * You’re storing cryptographic keys safely (and not in the source code). \n  * You’re rotating keys regularly to safeguard against brute-force attacks on them. \n* **Only open the ports you’re using.** Don’t forget open ports, especially on internet-facing applications. This is one of the ways attackers can gain access to the cloud infrastructure and infect it with malware. \n\n### Container \n\nThe next layer of security for native cloud is controlled at the container level. \n\nContainers are virtualization tools which allow you to run applications in isolated environments, separated from the hardware.  \n\nIf your application uses various technologies, you can install any needed packages and resolve dependencies in the container instead of on the host operating system. \n\nAnother useful feature of containers is that you can create container image templates and replicate environments without having to re-install tools and technologies. \n\nThe most known containerization services are Docker and Kubernetes.  \n\nDocker is a platform that enables developers to deploy applications in a containerized environment. Docker runs over a single node (machine), while Kubernetes is a container orchestration service. \n\nDocker and Kubernetes are usually seen as competitors, but they work very well together; Kubernetes can help manage multiple Docker containers simultaneously. \n\nHowever, there are a few security issues that need to be addressed regarding containers security: \n\n* **Do not run containers as root.** Developers find it easier to run containers as root because they don't have to provide their password when executing an action that requires root privileges. However, this opens up a wide palette of vulnerabilities; any attacker that would gain access to the container would have root privileges and, therefore, the highest level of permissions. \n* **Reduce the attack surface.** If an attacker gains access to the container, make sure they cannot escalate their privileges or escape the container; eliminate the use of UNIX binaries that can be used to bypass rules, such as \"sed\" and \"awk\". \n* **Implement a strong network policy**—for example, filter traffic to and from the container and use firewalls to ensure robust security. \n\n### Cluster \n\nThe third layer for cloud-native security is managed in clusters. \n\nA cluster is a set of nodes (machines) that run applications in containers. It comprises the nodes and a control plane, which is responsible for the maintenance of the nodes, determining for example which application is running in which container. \n\nThe nodes that are part of a cluster run the applications. \n\nLet’s understand how to protect clusters with the following security solutions:\n\n* **Implement Authentication.** This step requires the user to prove they are who they claim to be. The authentication process may be different from service to service, but it can require credentials like passwords, client certificates, tokens, and others. \n* **Implement Authorization.** Role-based access control (RBAC) establishes authorization by assigning roles to users and managing their privileges at role level to ensure application security. \n* **Control what privileges containers run with.** Establish permissions by using security contexts. These are settings that can be applied to a container or a set of containers inside a cluster that define privileges and access control. \n\n### Cloud \n\nThe outer layer of a cloud-native application refers to cloud infrastructure and configuration. Let’s see how to fix [the most common cloud misconfigurations](https://cyscale.com/use-cases/cloud-misconfigurations/) and secure your cloud-native application against attackers. \n\n* **Restrict inbound and outbound traffic.** Make sure to close or restrict ports that are not necessary. Use access lists to blacklist ranges of IPs and ports.  \n* **Ensure compliance with the Least Privilege Principle.** Make sure no user has more privileges than required to carry out their tasks and eliminate all administrator/root accounts that are not strictly necessary. \n* **Implement strong encryption and use industry-recommended cryptographic algorithms with strong keys.** Ensure that no one can read databases, files, and other resources if they gain access to your company's cloud. \n\nYou can identify misconfigurations in the cloud and remediate them effectively using the Cyscale security platform.\n\nThe Cyscale Cloud Platform offers a [CSPM (Cloud Security Posture Management)](https://cyscale.com/blog/what-to-look-for-in-a-cspm/) security tool that: \n\n* checks for a wide variety of vulnerabilities using security controls, \n* provides integration with the most important public cloud service providers like AWS (Amazon Web Services), Google Cloud, Azure, Alibaba, and supports multi-cloud environments,\n* sends relevant alerts,  \n* provides remediation steps to help your security teams protect your cloud environment effectively and overcome security challenges, and others. \n\n<!--EndFragment-->\n"}}]}},"pageContext":{"limit":9,"skip":0,"numPages":1,"currentPage":1,"category":"Cloud Native Security","seoTitle":"Cyscale - Cloud Native Security","seoDescription":"News about Cyscale Cloud Native Security","categoriesList":["Cloud Security","Compliance","News","Product","IAM","CSPM","CNAPP","Misconfigurations","Encryption","Cloud Native Security"],"categorySlug":"cloud-native-security"}},"staticQueryHashes":["220583031","4109069157","632500807","981947644"],"slicesMap":{}}